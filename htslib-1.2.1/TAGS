
bgzf.c,2996
#define BGZF_CACHE40,1554
#define BGZF_MT41,1573
#define BLOCK_HEADER_LENGTH 43,1590
#define BLOCK_FOOTER_LENGTH 44,1621
static const uint8_t g_magic[g_magic61,2314
    int size;65,2437
    uint8_t *block;block66,2451
    int64_t end_offset;67,2471
} cache_t;68,2495
KHASH_MAP_INIT_INT64(70,2532
    uint64_t uaddr;75,2594
    uint64_t caddr;76,2650
bgzidx1_t;78,2706
struct __bgzidx_t80,2718
    int noffs,82,2738
    int noffs, moffs;82,2738
    bgzidx1_t *offs;offs83,2812
    uint64_t ublock_addr;84,2851
static inline void packInt16(90,3006
static inline int unpackInt16(96,3124
static inline void packInt32(101,3221
static BGZF *bgzf_read_init(bgzf_read_init109,3397
static int mode2level(132,4194
static BGZF *bgzf_write_init(bgzf_write_init141,4493
BGZF *bgzf_open(bgzf_open169,5454
BGZF *bgzf_dopen(bgzf_dopen191,6093
BGZF *bgzf_hopen(bgzf_hopen213,6745
static int bgzf_compress(230,7185
static int bgzf_gzip_compress(256,8294
static int deflate_block(271,8868
static int inflate_block(290,9475
static int inflate_gzip_block(316,10139
static int check_header(346,11313
static void free_cache(356,11667
static int load_block_from_cache(366,11928
static void cache_block(387,12582
static void free_cache(414,13602
static int load_block_from_cache(415,13638
static void cache_block(416,13716
int bgzf_read_block(419,13771
ssize_t bgzf_read(547,17928
ssize_t bgzf_raw_read(576,18971
    struct bgzf_mtaux_t *mt;mt584,19108
    void *buf;buf585,19137
    int i,586,19152
    int i, errcode,586,19152
    int i, errcode, toproc,586,19152
    int i, errcode, toproc, compress_level;586,19152
} worker_t;587,19196
typedef struct bgzf_mtaux_t 589,19209
    int n_threads,590,19239
    int n_threads, n_blks,590,19239
    int n_threads, n_blks, curr,590,19239
    int n_threads, n_blks, curr, done;590,19239
    volatile int proc_cnt;591,19278
    void **blk;blk592,19305
    int *len;len593,19321
    worker_t *w;w594,19335
    pthread_t *tid;tid595,19352
    pthread_mutex_t lock;596,19372
    pthread_cond_t cv;597,19398
} mtaux_t;598,19421
static int worker_aux(600,19433
static void *mt_worker(mt_worker623,20210
int bgzf_mt(629,20310
static void mt_destroy(660,21562
static void mt_queue(678,22224
static int mt_flush_queue(688,22506
static int lazy_flush(713,23295
int bgzf_mt(724,23532
static inline int lazy_flush(729,23604
int bgzf_flush(736,23703
int bgzf_flush_try(762,24464
ssize_t bgzf_write(768,24600
ssize_t bgzf_raw_write(791,25376
int bgzf_close(796,25488
void bgzf_set_cache_size(829,26377
int bgzf_check_EOF(834,26474
int64_t bgzf_seek(847,26924
int bgzf_is_bgzf(868,27484
int bgzf_getc(880,27756
#define kroundup32(898,28267
int bgzf_getline(901,28378
void bgzf_index_destroy(935,29589
int bgzf_index_build_init(944,29747
int bgzf_index_add_block(953,29969
int bgzf_index_dump(968,30446
int bgzf_index_load(1018,31868
int bgzf_useek(1069,33373
long bgzf_utell(1120,34818

bgzip.c,151
static const int WINDOW_SIZE 38,1522
static void error(40,1565
static int write_open(49,1729
static int bgzip_main_usage(72,2469
int main(91,3517

faidx.c,850
    int32_t line_len,38,1436
    int32_t line_len, line_blen;38,1436
    int64_t len;39,1469
    uint64_t offset;40,1486
} faidx1_t;41,1507
KHASH_MAP_INIT_STR(42,1519
struct __faidx_t 44,1552
    BGZF *bgzf;bgzf45,1571
    int n,46,1587
    int n, m;46,1587
    char **name;name47,1601
    khash_t(48,1618
#define kroundup32(52,1663
faidx_t *fai_build_core(fai_build_core71,2316
void fai_save(149,4897
faidx_t *fai_read(fai_read165,5396
void fai_destroy(192,6073
int fai_build(202,6281
static FILE *download_and_open(download_and_open239,7273
faidx_t *fai_load(fai_load279,8401
char *fai_fetch(fai_fetch332,9632
int faidx_fetch_nseq(408,12173
int faidx_nseq(413,12238
const char *faidx_iseq(faidx_iseq418,12297
int faidx_seq_len(423,12377
char *faidx_fetch_seq(faidx_fetch_seq430,12562
int faidx_has_seq(469,13795

hfile.c,1390
hFILE *hfile_init(hfile_init64,2569
void hfile_destroy(89,3200
static inline int writebuffer_is_nonempty(97,3319
static ssize_t refill_buffer(105,3617
int hgetc2(130,4356
ssize_t hpeek(135,4457
ssize_t hread2(152,4932
static ssize_t flush_buffer(186,5957
int hflush(200,6321
int hputc2(208,6545
ssize_t hwrite2(217,6815
int hputs2(244,7621
off_t hseek(249,7768
int hclose(275,8522
void hclose_abruptly(290,8809
#define HAVE_CLOSESOCKET309,9170
    hFILE base;317,9411
    int fd;318,9427
    int is_socket:is_socket319,9439
} hFILE_fd;320,9460
static ssize_t fd_read(322,9473
static ssize_t fd_write(333,9772
static off_t fd_seek(344,10080
static int fd_flush(350,10223
static int fd_close(367,10675
static const struct hFILE_backend fd_backend 381,10960
static size_t blksize(386,11064
static hFILE *hopen_fd(hopen_fd393,11190
hFILE *hdopen(hdopen413,11699
static hFILE *hopen_fd_stdinout(hopen_fd_stdinout424,11983
int hfile_oflags(431,12181
    hFILE base;457,12743
    const char *buffer;buffer458,12759
    size_t length,459,12783
    size_t length, pos;459,12783
} hFILE_mem;460,12807
static ssize_t mem_read(462,12821
static off_t mem_seek(472,13103
static int mem_close(495,13689
static const struct hFILE_backend mem_backend 500,13741
static hFILE *hopen_mem(hopen_mem505,13841
hFILE *hopen(hopen525,14385
int hisremote(537,14853

hfile_irods.c,549
    hFILE base;40,1474
    int descriptor;41,1490
} hFILE_irods;42,1510
static int status_errno(44,1526
static void set_errno(57,1901
    rcComm_t *conn;conn64,2035
    rodsEnv env;65,2055
} irods 66,2072
static void irods_exit(68,2093
static int irods_init(74,2183
static ssize_t irods_read(106,3098
static ssize_t irods_write(125,3516
static off_t irods_seek(144,3997
static int irods_flush(164,4498
static int irods_close(183,4962
static const struct hFILE_backend irods_backend 197,5255
hFILE *hopen_irods(hopen_irods202,5377

hfile_net.c,355
    hFILE base;33,1313
    knetFile *netfp;netfp34,1329
} hFILE_net;35,1350
static int net_inited 37,1364
static void net_exit(40,1406
static int net_init(46,1471
static ssize_t net_read(61,1856
static off_t net_seek(67,2014
static int net_close(73,2167
static const struct hFILE_backend net_backend 79,2278
hFILE *hopen_net(hopen_net84,2378

hts.c,3514
#define KS_BGZF 42,1569
    KSTREAM_INIT2(45,1680
const unsigned char seq_nt16_table[seq_nt16_table60,1964
const char seq_nt16_str[seq_nt16_str80,2914
const int seq_nt16_int[seq_nt16_int82,2963
static enum htsFormatCategory format_category(88,3117
static size_t decompress_peek(122,3751
parse_version(154,4755
int hts_detect_format(176,5370
char *hts_format_description(hts_format_description287,9357
htsFile *hts_open(hts_open363,11452
htsFile *hts_hopen(hts_hopen384,11865
int hts_close(482,14754
const htsFormat *hts_get_format(hts_get_format542,16191
int hts_set_opt(547,16276
int hts_set_threads(561,16529
int hts_set_fai_filename(571,16784
BGZF *hts_get_bgzfp(hts_get_bgzfp588,17272
int hts_useek(595,17414
long hts_utell(606,17744
int hts_getline(614,17901
char **hts_readlist(hts_readlist622,18091
char **hts_readlines(hts_readlines676,19292
int hts_file_type(726,20729
#define HTS_MIN_MARKER_DIST 752,21490
#define META_BIN(756,21597
#define pair64_lt(758,21640
KSORT_INIT(761,21706
    int32_t m,764,21766
    int32_t m, n;764,21766
    uint64_t loff;765,21784
    hts_pair64_t *list;list766,21803
} bins_t;767,21827
KHASH_MAP_INIT_INT(770,21864
typedef khash_t(bin)771,21896
    int32_t n,774,21943
    int32_t n, m;774,21943
    uint64_t *offset;offset775,21961
} lidx_t;776,21983
struct __hts_idx_t 778,21994
    int fmt,779,22015
    int fmt, min_shift,779,22015
    int fmt, min_shift, n_lvls,779,22015
    int fmt, min_shift, n_lvls, n_bins;779,22015
    uint32_t l_meta;780,22055
    int32_t n,781,22076
    int32_t n, m;781,22076
    uint64_t n_no_coor;782,22094
    bidx_t **bidx;bidx783,22118
    lidx_t *lidx;lidx784,22137
    uint8_t *meta;meta785,22155
        uint32_t last_bin,787,22187
        uint32_t last_bin, save_bin;787,22187
        int last_coor,788,22224
        int last_coor, last_tid,788,22224
        int last_coor, last_tid, save_tid,788,22224
        int last_coor, last_tid, save_tid, finished;788,22224
        uint64_t last_off,789,22277
        uint64_t last_off, save_off;789,22277
        uint64_t off_beg,790,22314
        uint64_t off_beg, off_end;790,22314
        uint64_t n_mapped,791,22349
        uint64_t n_mapped, n_unmapped;791,22349
    } z;792,22388
static inline void insert_to_b(795,22425
static inline void insert_to_l(814,22925
hts_idx_t *hts_idx_init(hts_idx_init835,23685
static void update_loff(857,24532
static void compress_binning(894,25751
void hts_idx_finish(941,27688
int hts_idx_push(957,28360
void hts_idx_destroy(1017,31172
static inline long idx_read(1038,31787
static inline long idx_write(1044,31967
static inline void swap_bins(1050,32156
static void hts_idx_save_core(1059,32321
void hts_idx_save(1123,35024
static int hts_idx_load_core(1159,36209
hts_idx_t *hts_idx_load_local(hts_idx_load_local1212,38400
void hts_idx_set_meta(1290,41055
uint8_t *hts_idx_get_meta(hts_idx_get_meta1300,41335
const char **hts_idx_seqnames(hts_idx_seqnames1306,41444
int hts_idx_get_stat(1326,41884
uint64_t hts_idx_get_n_no_coor(1345,42362
static inline int reg2bins(1354,42503
hts_itr_t *hts_itr_query(hts_itr_query1372,43195
void hts_itr_destroy(1485,47027
const char *hts_parse_reg(hts_parse_reg1490,47137
hts_itr_t *hts_itr_querys(hts_itr_querys1521,48257
int hts_itr_next(1539,48971
static char *test_and_fetch(test_and_fetch1585,50655
char *hts_idx_getfn(hts_idx_getfn1624,52126
hts_idx_t *hts_idx_load(hts_idx_load1646,52715

htsfile.c,345
enum { identify,36,1377
enum { identify, view_headers,36,1377
enum { identify, view_headers, view_all 36,1377
enum { identify, view_headers, view_all } mode 36,1377
int show_headers 37,1436
static htsFile *dup_stdout(dup_stdout39,1459
static int view_sam(46,1645
static int view_vcf(67,2158
static void usage(88,2675
int main(99,3009

kfunc.c,603
double kf_lgamma(35,1380
double kf_erfc(54,1964
#define KF_GAMMA_EPS 95,3462
#define KF_TINY 96,3489
static double _kf_gammap(99,3581
static double _kf_gammaq(110,3896
double kf_gammap(131,4439
double kf_gammaq(136,4549
static double kf_betai_aux(148,4972
double kf_betai(172,5660
int main(179,5839
static double lbinom(193,6236
static double hypergeo(205,6472
    int n11,211,6627
    int n11, n1_,211,6627
    int n11, n1_, n_1,211,6627
    int n11, n1_, n_1, n;211,6627
    double p;212,6653
} hgacc_t;213,6667
static double hypergeo_acc(216,6734
double kt_fisher_exact(241,7697

knetfile.c,895
static int socket_wait(60,2232
static int socket_connect(86,2947
#define __err_connect(88,3011
char *int64tostr(int64tostr111,4146
int64_t strtoint64(126,4398
int knet_win32_init(134,4603
void knet_win32_destroy(139,4693
static SOCKET socket_connect(147,4998
#define __err_connect(149,5065
static off_t my_netread(182,6204
static int kftp_get_response(204,6939
static int kftp_send_cmd(233,7701
static int kftp_pasv_prep(241,7991
static int kftp_pasv_connect(256,8348
int kftp_connect(270,8773
int kftp_reconnect(281,9062
knetFile *kftp_parse_url(kftp_parse_url293,9288
int kftp_connect_file(319,10108
knetFile *khttp_parse_url(khttp_parse_url369,11323
int khttp_connect_file(404,12381
knetFile *knet_open(knet_open462,14088
knetFile *knet_dopen(knet_dopen506,15125
ssize_t knet_read(514,15287
off_t knet_seek(543,16033
int knet_close(576,17145
int main(594,17659

kstring.c,330
int kvsprintf(33,1291
int ksprintf(52,1752
char *kstrtok(kstrtok62,1899
int ksplit_core(89,2747
#define __ksplit_aux 95,2928
typedef unsigned char ubyte_t;137,3979
static int *ksBM_prep(ksBM_prep140,4079
void *kmemmem(kmemmem180,5012
char *kstrstr(kstrstr201,5620
char *kstrnstr(kstrnstr206,5753
int main(217,6000

regidx.c,1032
#define LIDX_SHIFT 31,1328
    int *idx,idx36,1446
    int *idx, nidx;36,1446
    int nregs,37,1466
    int nregs, mregs;37,1466
    reg_t *regs;regs38,1511
    void *payload;payload39,1528
reglist_t;41,1549
struct _regidx_t44,1591
    int nseq,46,1610
    int nseq, mseq;46,1610
    reglist_t *seq;seq47,1655
    void *seq2regs;seq2regs48,1708
    char **seq_names;seq_names49,1781
    regidx_free_f free;50,1803
    regidx_parse_f parse;51,1888
    void *usr;usr52,1940
    kstring_t str;55,2055
    int rid_prev,56,2074
    int rid_prev, start_prev,56,2074
    int rid_prev, start_prev, end_prev;56,2074
    int payload_size;57,2114
    void *payload;payload58,2136
int regidx_seq_nregs(61,2159
int regidx_nregs(68,2353
char **regidx_seq_names(regidx_seq_names75,2490
int _regidx_build_index(81,2589
int regidx_insert(115,3584
regidx_t *regidx_init(regidx_init165,5281
void regidx_destroy(219,6737
int regidx_overlap(242,7260
int regidx_parse_bed(283,8473
int regidx_parse_tab(308,9257

sam.c,4742
KHASH_DECLARE(38,1474
typedef khash_t(s2i)40,1514
bam_hdr_t *bam_hdr_init(bam_hdr_init46,1619
void bam_hdr_destroy(51,1703
bam_hdr_t *bam_hdr_dup(bam_hdr_dup66,2063
static bam_hdr_t *hdr_from_dict(hdr_from_dict91,2826
bam_hdr_t *bam_hdr_read(bam_hdr_read109,3386
int bam_hdr_write(150,4956
int bam_name2id(187,6096
bam1_t *bam_init1(bam_init1208,6605
void bam_destroy1(213,6677
bam1_t *bam_copy1(bam_copy1219,6763
bam1_t *bam_dup1(bam_dup1235,7266
int bam_cigar2qlen(243,7444
int bam_cigar2rlen(252,7668
int32_t bam_endpos(261,7892
static inline int aux_type2size(269,8115
static void swap_data(287,8456
int bam_read1(324,9711
int bam_write1(360,10974
static hts_idx_t *bam_index(bam_index392,11948
int bam_index_build(428,13115
static int bam_readrec(458,13721
static int cram_readrec(470,14139
static int sam_bam_cram_readrec(478,14401
typedef struct hts_cram_idx_t 496,15159
    int fmt;497,15191
    cram_fd *cram;cram498,15204
} hts_cram_idx_t;499,15223
hts_idx_t *sam_index_load(sam_index_load501,15242
static hts_itr_t *cram_itr_query(cram_itr_query522,15850
hts_itr_t *sam_itr_queryi(sam_itr_queryi562,17096
static int cram_name2id(573,17510
hts_itr_t *sam_itr_querys(sam_itr_querys579,17648
bam_hdr_t *sam_hdr_parse(sam_hdr_parse595,18179
bam_hdr_t *sam_hdr_read(sam_hdr_read633,19466
int sam_hdr_write(675,20698
int sam_parse1(726,22237
#define _read_token(728,22293
#define _read_token_aux(729,22408
#define _get_mem(730,22552
#define _parse_err(731,22676
#define _parse_warn(732,22821
#undef _parse_warn902,29868
#undef _parse_err903,29887
#undef _get_mem904,29905
#undef _read_token_aux905,29921
#undef _read_token906,29944
int sam_read1(912,30059
int sam_format1(950,31038
int sam_write1(1071,35661
void bam_aux_append(1103,36485
static inline uint8_t *skip_aux(skip_aux1117,36929
uint8_t *bam_aux_get(bam_aux_get1138,37344
int bam_aux_del(1152,37682
int32_t bam_aux2i(1164,37920
double bam_aux2f(1176,38292
char bam_aux2A(1185,38470
char *bam_aux2Z(bam_aux2Z1193,38597
int sam_open_mode(1201,38739
#define STRNCMP(1218,39330
int bam_str2flag(1219,39398
char *bam_flag2str(bam_flag2str1248,40665
    int k,1281,41920
    int k, x,1281,41920
    int k, x, y,1281,41920
    int k, x, y, end;1281,41920
} cstate_t;1282,41942
static cstate_t g_cstate_null 1284,41955
typedef struct __linkbuf_t 1286,42005
    bam1_t b;1287,42034
    int32_t beg,1288,42048
    int32_t beg, end;1288,42048
    cstate_t s;1289,42070
    struct __linkbuf_t *next;next1290,42086
} lbnode_t;1291,42116
    int cnt,1294,42146
    int cnt, n,1294,42146
    int cnt, n, max;1294,42146
    lbnode_t **buf;buf1295,42167
} mempool_t;1296,42187
static mempool_t *mp_init(mp_init1298,42201
static void mp_destroy(1304,42322
static inline lbnode_t *mp_alloc(mp_alloc1314,42508
static inline void mp_free(1320,42676
static inline int resolve_cigar2(1338,43230
#define _cop(1340,43309
#define _cln(1341,43346
KHASH_MAP_INIT_STR(1420,47252
typedef khash_t(olap_hash)1421,47294
struct __bam_plp_t 1423,47335
    mempool_t *mp;mp1424,47356
    lbnode_t *head,head1425,47375
    lbnode_t *head, *tail,tail1425,47375
    lbnode_t *head, *tail, *dummy;dummy1425,47375
    int32_t tid,1426,47410
    int32_t tid, pos,1426,47410
    int32_t tid, pos, max_tid,1426,47410
    int32_t tid, pos, max_tid, max_pos;1426,47410
    int is_eof,1427,47450
    int is_eof, max_plp,1427,47450
    int is_eof, max_plp, error,1427,47450
    int is_eof, max_plp, error, maxcnt;1427,47450
    uint64_t id;1428,47490
    bam_pileup1_t *plp;plp1429,47507
    bam1_t *b;b1431,47568
    bam_plp_auto_f func;1432,47583
    void *data;data1433,47608
    olap_hash_t *overlaps;overlaps1434,47624
bam_plp_t bam_plp_init(1437,47655
void bam_plp_init_overlaps(1454,48100
void bam_plp_destroy(1459,48249
static inline int cigar_iref2iseq_set(1488,49344
static inline int cigar_iref2iseq_next(1523,50554
static void tweak_overlap_quality(1548,51528
static void overlap_push(1624,54720
static void overlap_remove(1652,55679
const bam_pileup1_t *bam_plp_next(bam_plp_next1676,56518
int bam_plp_push(1722,58832
const bam_pileup1_t *bam_plp_auto(bam_plp_auto1761,60472
void bam_plp_reset(1785,61428
void bam_plp_set_maxcnt(1800,61756
struct __bam_mplp_t 1809,61920
    int n;1810,61942
    uint64_t min,1811,61953
    uint64_t min, *pos;pos1811,61953
    bam_plp_t *iter;iter1812,61977
    int *n_plp;n_plp1813,61998
    const bam_pileup1_t **plp;plp1814,62014
bam_mplp_t bam_mplp_init(1817,62049
void bam_mplp_init_overlaps(1835,62639
void bam_mplp_set_maxcnt(1842,62780
void bam_mplp_destroy(1849,62924
int bam_mplp_auto(1857,63136

synced_bcf_reader.c,1598
#define MAX_CSI_COOR 36,1423
    uint32_t start,40,1517
    uint32_t start, end;40,1517
region1_t;42,1544
typedef struct _region_t44,1556
    region1_t *regs;regs46,1583
    int nregs,47,1604
    int nregs, mregs,47,1604
    int nregs, mregs, creg;47,1604
region_t;49,1634
char *bcf_sr_strerror(bcf_sr_strerror55,1880
static int *init_filters(init_filters75,2439
int bcf_sr_set_regions(104,3195
int bcf_sr_set_targets(118,3697
int bcf_sr_add_reader(132,4079
bcf_srs_t *bcf_sr_init(bcf_sr_init245,7309
static void bcf_sr_destroy1(251,7426
void bcf_sr_destroy(265,7886
void bcf_sr_remove_reader(280,8354
static void collapse_buffer(300,9134
void debug_buffer(339,10453
void debug_buffers(352,10889
static inline int has_filter(363,11163
static int _reader_seek(380,11573
static int _readers_next_region(413,12565
static void _reader_fill_buffer(438,13344
static void _reader_shift_buffer(516,16548
static int _reader_match_alleles(537,17335
int _reader_next_line(607,20203
int bcf_sr_next_line(677,22719
static void bcf_sr_seek_start(704,23698
int bcf_sr_seek(714,23895
int bcf_sr_set_samples(732,24304
static void _regions_add(807,26625
static bcf_sr_regions_t *_regions_init_string(_regions_init_string858,28344
static int _regions_parse_line(918,30265
bcf_sr_regions_t *bcf_sr_regions_init(bcf_sr_regions_init977,31631
void bcf_sr_regions_destroy(1044,33934
int bcf_sr_regions_seek(1069,34590
int bcf_sr_regions_next(1089,35108
static int _regions_match_alleles(1176,37913
int bcf_sr_regions_overlap(1223,39549
void bcf_sr_regions_flush(1251,40700

tabix.c,638
    char *regions_fname,regions_fname44,1596
    char *regions_fname, *targets_fname;targets_fname44,1596
    int print_header,45,1637
    int print_header, header_only;45,1637
args_t;47,1674
static void error(49,1683
#define IS_GFF 58,1847
#define IS_BED 59,1870
#define IS_SAM 60,1893
#define IS_VCF 61,1916
#define IS_BCF 62,1939
#define IS_BAM 63,1962
#define IS_CRAM 64,1985
#define IS_TXT 65,2008
int file_type(67,2055
static char **parse_regions(parse_regions90,2973
static int query_regions(140,4375
static int query_chroms(227,7471
int reheader_file(262,8574
static int usage(335,11410
int main(364,13298

tbx.c,676
KHASH_DECLARE(35,1384
tbx_conf_t tbx_conf_bed 38,1474
tbx_conf_t tbx_conf_psltbl 39,1531
tbx_conf_t tbx_conf_sam 40,1594
tbx_conf_t tbx_conf_vcf 41,1650
    int64_t beg,44,1724
    int64_t beg, end;44,1724
    char *ss,ss45,1746
    char *ss, *se;se45,1746
    int tid;46,1765
} tbx_intv_t;47,1778
static inline int get_tid(49,1793
int tbx_name2id(66,2258
int tbx_parse1(71,2339
static inline int get_intv(134,4900
int tbx_readrec(154,5711
void tbx_set_meta(167,6069
tbx_t *tbx_index(tbx_index198,6929
void tbx_destroy(239,8247
int tbx_index_build(253,8559
tbx_t *tbx_index_load(tbx_index_load268,9071
const char **tbx_seqnames(tbx_seqnames296,9674

vcf.c,4571
KHASH_MAP_INIT_STR(42,1576
typedef khash_t(vdict)43,1616
KSTREAM_DECLARE(46,1674
static bcf_idinfo_t bcf_idinfo_def 51,1874
int bcf_hdr_add_sample(59,2095
int bcf_hdr_parse_sample_line(94,2994
int bcf_hdr_sync(116,3557
void bcf_hrec_destroy(152,4558
bcf_hrec_t *bcf_hrec_dup(bcf_hrec_dup168,4874
void bcf_hrec_debug(189,5628
void bcf_header_debug(198,5893
void bcf_hrec_add_key(216,6458
void bcf_hrec_set_val(228,6858
void hrec_add_idx(248,7441
int bcf_hrec_find_key(259,7763
static inline int is_escaped(267,7941
bcf_hrec_t *bcf_hdr_parse_line(bcf_hdr_parse_line274,8084
int bcf_hdr_register_hrec(346,10252
int bcf_hdr_add_hrec(470,14362
bcf_hrec_t *bcf_hdr_get_hrec(bcf_hdr_get_hrec514,15755
void bcf_hdr_check_sanity(544,16828
int bcf_hdr_parse(568,17576
int bcf_hdr_append(595,18511
void bcf_hdr_remove(604,18725
int bcf_hdr_printf(651,20297
const char *bcf_hdr_get_version(bcf_hdr_get_version674,20717
void bcf_hdr_set_version(685,21010
bcf_hdr_t *bcf_hdr_init(bcf_hdr_init704,21472
void bcf_hdr_destroy(720,21915
bcf_hdr_t *bcf_hdr_read(bcf_hdr_read742,22498
int bcf_hdr_write(775,23480
bcf1_t *bcf_init1(bcf_init1798,24068
void bcf_clear(805,24166
void bcf_empty1(837,24968
void bcf_destroy1(847,25206
static inline int bcf_read1_core(853,25272
#define bit_array_size(878,26057
#define bit_array_set(879,26093
#define bit_array_clear(880,26153
#define bit_array_test(881,26214
int bcf_subset_format(884,26365
int bcf_read(925,27691
int bcf_readrec(933,27943
static inline void bcf1_sync_id(942,28193
static inline void bcf1_sync_alleles(948,28431
static inline void bcf1_sync_filter(956,28734
static inline void bcf1_sync_info(963,28951
static int bcf1_sync(986,29637
bcf1_t *bcf_copy(bcf_copy1127,34590
bcf1_t *bcf_dup(bcf_dup1149,35231
int bcf_write(1155,35327
bcf_hdr_t *vcf_hdr_read(vcf_hdr_read1201,37052
int bcf_hdr_set(1274,39471
static void _bcf_hrec_format(1293,39927
void bcf_hrec_format(1313,40516
char *bcf_hdr_fmt_text(bcf_hdr_fmt_text1317,40615
const char **bcf_hdr_seqnames(bcf_hdr_seqnames1337,41136
int vcf_hdr_write(1357,41678
void bcf_enc_vint(1375,42156
void bcf_enc_vfloat(1414,43619
void bcf_enc_vchar(1420,43746
void bcf_fmt_array(1426,43864
        #define BRANCH(1444,44241
        #undef BRANCH1461,45223
uint8_t *bcf_fmt_sized_array(bcf_fmt_sized_array1465,45254
    int key,1478,45540
    int key, max_m,1478,45540
    int key, max_m, size,1478,45540
    int key, max_m, size, offset;1478,45540
    uint32_t is_gt:is_gt1479,45574
    uint32_t is_gt:1, max_g:max_g1479,45574
    uint32_t is_gt:1, max_g:15, max_l:max_l1479,45574
    uint32_t y;1480,45616
    uint8_t *buf;buf1481,45632
} fmt_aux_t;1482,45650
static inline void align_mem(1484,45664
int _vcf_parse_format(1494,45894
int vcf_parse(1731,55454
int vcf_read(1907,63797
static inline uint8_t *bcf_unpack_fmt_core1(bcf_unpack_fmt_core11915,63991
static inline uint8_t *bcf_unpack_info_core1(bcf_unpack_info_core11929,64416
int bcf_unpack(1949,65190
int vcf_format(2018,67934
int vcf_write_line(2115,71696
int vcf_write(2126,72021
int bcf_hdr_id2int(2142,72450
hts_idx_t *bcf_index(bcf_index2155,72727
int bcf_index_build(2192,73858
int bcf_hdr_combine(2210,74293
int bcf_translate(2273,77214
bcf_hdr_t *bcf_hdr_dup(bcf_hdr_dup2389,81894
bcf_hdr_t *bcf_hdr_subset(bcf_hdr_subset2398,82098
int bcf_hdr_set_samples(2447,83824
int bcf_subset(2513,86102
int bcf_is_snp(2541,87104
static void bcf_set_variant_type(2558,87577
static void bcf_set_variant_types(2616,89321
int bcf_get_variant_types(2635,89964
int bcf_get_variant_type(2640,90094
int bcf_update_info(2646,90252
int bcf_update_format_string(2729,93087
int bcf_update_format(2755,93818
int bcf_update_filter(2858,97133
int bcf_add_filter(2871,97530
int bcf_remove_filter(2889,98181
int bcf_has_filter(2903,98751
static inline int _bcf1_sync_alleles(2918,99260
int bcf_update_alleles(2936,99673
int bcf_update_alleles_str(2963,100459
int bcf_update_id(2980,100891
bcf_fmt_t *bcf_get_fmt(bcf_get_fmt2993,101219
bcf_info_t *bcf_get_info(bcf_get_info3000,101490
bcf_fmt_t *bcf_get_fmt_id(bcf_get_fmt_id3007,101766
bcf_info_t *bcf_get_info_id(bcf_get_info_id3018,102033
int bcf_get_info_values(3030,102309
            #define BRANCH(3069,103676
            #undef BRANCH3079,104171
    #define BRANCH(3084,104232
    #undef BRANCH3103,105336
int bcf_get_format_string(3107,105398
int bcf_get_format_values(3145,106709
    #define BRANCH(3186,108263
    #undef BRANCH3209,109689

vcf_sweep.c,1017
#define SW_FWD 28,1221
#define SW_BWD 29,1238
struct _bcf_sweep_t31,1256
    htsFile *file;file33,1278
    bcf_hdr_t *hdr;hdr34,1297
    BGZF *fp;fp35,1317
    int direction;37,1332
    int block_size;38,1400
    bcf1_t *rec;rec39,1479
    int nrec,40,1521
    int nrec, mrec;40,1521
    int lrid,41,1601
    int lrid, lpos,41,1601
    int lrid, lpos, lnals,41,1601
    int lrid, lpos, lnals, lals_len,41,1601
    int lrid, lpos, lnals, lals_len, mlals;41,1601
    char *lals;lals42,1682
    uint64_t *idx;idx44,1699
    int iidx,45,1770
    int iidx, nidx,45,1770
    int iidx, nidx, midx;45,1770
    int idx_done;46,1842
static inline int sw_rec_equal(53,2039
static void sw_rec_save(67,2459
static void sw_fill_buffer(81,2834
bcf_sweep_t *bcf_sweep_init(bcf_sweep_init105,3451
void bcf_sweep_destroy(120,3905
static void sw_seek(132,4144
bcf1_t *bcf_sweep_fwd(bcf_sweep_fwd144,4377
bcf1_t *bcf_sweep_bwd(bcf_sweep_bwd173,5057
bcf_hdr_t *bcf_sweep_hdr(bcf_sweep_hdr181,5265

vcfutils.c,681
int bcf_calc_ac(27,1206
            #define BRANCH_INT(52,2052
            #undef BRANCH_INT66,2809
        #define BRANCH_INT(87,3530
        #undef BRANCH_INT111,4838
int bcf_gt_type(117,4905
    #define BRANCH_INT(120,5043
    #undef BRANCH_INT154,6332
int bcf_trim_alleles(168,6687
    #define BRANCH(177,6939
    #undef BRANCH197,7887
void bcf_remove_alleles(210,8124
            #define BRANCH(355,13019
            #undef BRANCH372,13772
            #define BRANCH(380,13952
            #undef BRANCH401,14878
            #define BRANCH(590,22398
            #undef BRANCH612,23418
            #define BRANCH(619,23610
            #undef BRANCH661,25625

cram/cram.h,25
#define _CRAM_H_47,2009

cram/cram_codecs.h,2220
#define _CRAM_ENCODINGS_H_32,1596
    int32_t symbol;52,2029
    int32_t p;53,2049
    int32_t code;54,2113
    int32_t len;55,2131
} cram_huffman_code;56,2148
    int ncodes;59,2187
    cram_huffman_code *codes;codes60,2203
} cram_huffman_decoder;61,2233
#define MAX_HUFF 63,2258
    cram_huffman_code *codes;codes65,2296
    int nvals;66,2326
    int val2code[val2code67,2341
} cram_huffman_encoder;68,2412
    int32_t offset;71,2454
    int32_t nbits;72,2474
} cram_beta_decoder;73,2493
    int32_t offset;76,2532
} cram_gamma_decoder;77,2552
    int32_t offset;80,2592
    int32_t k;81,2612
} cram_subexp_decoder;82,2627
    int32_t content_id;85,2668
    enum cram_external_type type;86,2692
} cram_external_decoder;87,2726
    struct cram_codec *len_codec;len_codec90,2769
    struct cram_codec *value_codec;value_codec91,2803
} cram_byte_array_len_decoder;92,2839
    unsigned char stop;95,2888
    int32_t content_id;96,2912
} cram_byte_array_stop_decoder;97,2936
    enum cram_encoding len_encoding;100,2986
    enum cram_encoding val_encoding;101,3023
    void *len_dat;len_dat102,3060
    void *val_dat;val_dat103,3079
    struct cram_codec *len_codec;len_codec104,3098
    struct cram_codec *val_codec;val_codec105,3132
} cram_byte_array_len_encoder;106,3166
typedef struct cram_codec 111,3235
    enum cram_encoding codec;112,3263
    cram_block *out;out113,3293
    void (*free)free114,3314
    int (*decode)decode115,3358
    int (*encode)encode117,3468
    int (*store)store119,3559
	cram_huffman_decoder         huffman;122,3660
	cram_external_decoder        external;123,3699
	cram_beta_decoder            beta;124,3739
	cram_gamma_decoder           gamma;125,3775
	cram_subexp_decoder          subexp;126,3812
	cram_byte_array_len_decoder  byte_array_len;127,3850
	cram_byte_array_stop_decoder byte_array_stop;128,3896
	cram_huffman_encoder         e_huffman;130,3944
	cram_external_decoder        e_external;131,3985
	cram_byte_array_stop_decoder e_byte_array_stop;132,4027
	cram_byte_array_len_encoder  e_byte_array_len;133,4076
	cram_beta_decoder            e_beta;134,4124
} cram_codec;136,4169
#define GET_BIT_MSB(152,4765

cram/cram_decode.h,30
#define _CRAM_READ_H_42,1868

cram/cram_encode.h,31
#define _CRAM_WRITE_H_42,1869

cram/cram_index.h,31
#define _CRAM_INDEX_H_32,1587

cram/cram_io.h,639
#define _CRAM_IO_H_43,1879
#define ITF8_MACROS49,1940
#define CRAM_KEY(61,2244
#define itf8_get(95,2968
#define itf8_put(97,3384
#define itf8_size(99,3797
#define BLOCK_SIZE(194,6310
#define BLOCK_DATA(195,6344
#define BLOCK_END(198,6435
#define BLOCK_RESIZE(201,6531
#define BLOCK_GROW(210,6808
#define BLOCK_APPEND(213,6912
#define BLOCK_APPEND_CHAR(221,7123
#define BLOCK_APPEND_UINT(228,7298
static inline unsigned char *append_uint32(append_uint32236,7544
static inline unsigned char *append_sub32(append_sub32274,9003
static inline unsigned char *append_uint64(append_uint64288,9494
#define BLOCK_UPLEN(306,9892

cram/cram_samtools.h,1259
#define _CRAM_SAMTOOLS_H_32,1595
#define bam_blk_size(35,1652
#define bam_set_blk_size(36,1691
#define bam_ref(38,1744
#define bam_pos(39,1783
#define bam_mate_pos(40,1822
#define bam_mate_ref(41,1862
#define bam_ins_size(42,1902
#define bam_seq_len(43,1943
#define bam_cigar_len(44,1985
#define bam_flag(45,2028
#define bam_bin(46,2068
#define bam_map_qual(47,2107
#define bam_name_len(48,2147
#define bam_name(49,2190
#define bam_qual(50,2234
#define bam_seq(51,2277
#define bam_cigar(52,2319
#define bam_aux(53,2363
#define bam_dup(55,2406
#define bam_free(57,2460
#define bam_reg2bin(59,2504
enum cigar_op 63,2589
    BAM_CMATCH_=64,2605
    BAM_CMATCH_=BAM_CMATCH,64,2605
    BAM_CINS_=65,2633
    BAM_CINS_=BAM_CINS,65,2633
    BAM_CDEL_=66,2657
    BAM_CDEL_=BAM_CDEL,66,2657
    BAM_CREF_SKIP_=67,2681
    BAM_CREF_SKIP_=BAM_CREF_SKIP,67,2681
    BAM_CSOFT_CLIP_=68,2715
    BAM_CSOFT_CLIP_=BAM_CSOFT_CLIP,68,2715
    BAM_CHARD_CLIP_=69,2751
    BAM_CHARD_CLIP_=BAM_CHARD_CLIP,69,2751
    BAM_CPAD_=70,2787
    BAM_CPAD_=BAM_CPAD,70,2787
    BAM_CBASE_MATCH=71,2811
    BAM_CBASE_MATCH=BAM_CEQUAL,71,2811
    BAM_CBASE_MISMATCH=72,2843
    BAM_CBASE_MISMATCH=BAM_CDIFF72,2843
typedef bam1_t bam_seq_t;75,2880

cram/cram_stats.h,31
#define _CRAM_STATS_H_32,1592

cram/cram_structs.h,16347
#define _CRAM_STRUCTS_H_32,1594
KHASH_MAP_INIT_INT(60,2172
typedef unsigned char uc;66,2289
    int i;72,2396
    char *p;p73,2407
} pmap_t;74,2420
KHASH_MAP_INIT_STR(79,2649
#define SEQS_PER_SLICE 83,2697
#define SLICE_PER_CNT 84,2726
#define CRAM_SUBST_MATRIX 86,2752
#define MAX_STAT_VAL 88,2802
    int freqs[freqs91,2871
    khash_t(92,2900
} cram_stats;95,3024
enum cram_encoding 98,3081
    E_NULL 99,3102
    E_EXTERNAL 100,3132
    E_GOLOMB 101,3162
    E_HUFFMAN 102,3192
    E_BYTE_ARRAY_LEN 103,3222
    E_BYTE_ARRAY_STOP 104,3252
    E_BETA 105,3282
    E_SUBEXP 106,3312
    E_GOLOMB_RICE 107,3342
    E_GAMMA 108,3372
enum cram_external_type 111,3405
    E_INT 112,3431
    E_LONG 113,3461
    E_BYTE 114,3491
    E_BYTE_ARRAY 115,3521
    E_BYTE_ARRAY_BLOCK 116,3551
enum cram_DS_ID 120,3662
    DS_CORE 121,3680
    DS_aux 122,3699
    DS_aux_OQ 123,3729
    DS_aux_BQ 124,3748
    DS_aux_BD 125,3767
    DS_aux_BI 126,3786
    DS_aux_FZ 127,3805
    DS_aux_oq 128,3837
    DS_aux_os 129,3875
    DS_aux_oz 130,3913
    DS_ref,131,3949
    DS_RN,132,3961
    DS_QS,133,3984
    DS_IN,134,4007
    DS_SC,135,4030
    DS_BF,137,4054
    DS_CF,138,4079
    DS_AP,139,4090
    DS_RG,140,4101
    DS_MQ,141,4112
    DS_NS,142,4123
    DS_MF,143,4134
    DS_TS,144,4145
    DS_NP,145,4156
    DS_NF,146,4167
    DS_RL,147,4178
    DS_FN,148,4189
    DS_FC,149,4200
    DS_FP,150,4211
    DS_DL,151,4222
    DS_BA,152,4233
    DS_BS,153,4244
    DS_TL,154,4255
    DS_RI,155,4266
    DS_RS,156,4277
    DS_PD,157,4288
    DS_HC,158,4299
    DS_BB,159,4310
    DS_QQ,160,4321
    DS_TN,162,4333
    DS_RN_len,164,4357
    DS_SC_len,165,4372
    DS_BB_len,166,4387
    DS_QQ_len,167,4402
    DS_TC,169,4418
    DS_TM,170,4447
    DS_TV,171,4466
    DS_END,173,4490
    char    magic[magic178,4557
    uint8_t major_version;179,4579
    uint8_t minor_version;180,4606
    char    file_id[file_id181,4633
} cram_file_def;182,4692
#define CRAM_MAJOR_VERS(184,4710
#define CRAM_MINOR_VERS(185,4748
enum cram_block_method 189,4809
    ERROR 190,4834
    RAW 191,4853
    GZIP 192,4871
    BZIP2 193,4889
    LZMA 194,4907
    RANS 195,4925
    RANS0 196,4969
    RANS1 197,4987
    GZIP_RLE 198,5052
enum cram_content_type 201,5107
    CT_ERROR 202,5132
    FILE_HEADER 203,5161
    COMPRESSION_HEADER 204,5189
    MAPPED_SLICE 205,5217
    UNMAPPED_SLICE 206,5245
    EXTERNAL 207,5291
    CORE 208,5319
    int trial;214,5441
    int next_trial;215,5456
    int sz_gz_rle;218,5514
    int sz_gz_def;219,5533
    int sz_rans0;220,5552
    int sz_rans1;221,5570
    int sz_bzip2;222,5588
    int sz_lzma;223,5606
    int method;226,5660
    int strat;227,5676
    int gz_rle_cnt;230,5766
    int gz_def_cnt;231,5786
    int rans0_cnt;232,5806
    int rans1_cnt;233,5825
    int bzip2_cnt;234,5844
    int lzma_cnt;235,5863
    int revised_method;236,5881
    double gz_rle_extra;238,5906
    double gz_def_extra;239,5931
    double rans0_extra;240,5956
    double rans1_extra;241,5980
    double bzip2_extra;242,6004
    double lzma_extra;243,6028
} cram_metrics;244,6051
    enum cram_block_method  method,248,6097
    enum cram_block_method  method, orig_method;248,6097
    enum cram_content_type  content_type;249,6146
    int32_t  content_id;250,6188
    int32_t  comp_size;251,6213
    int32_t  uncomp_size;252,6237
    uint32_t crc32;253,6263
    int32_t  idx;254,6283
    unsigned char    *data;data255,6324
    size_t alloc;258,6372
    size_t byte;259,6390
    int bit;260,6407
} cram_block;261,6420
#define CRAM_MAP_HASH 266,6503
#define CRAM_MAP(267,6528
    int32_t ref_seq_id;271,6631
    int32_t ref_seq_start;272,6655
    int32_t ref_seq_span;273,6682
    int32_t num_records;274,6708
    int32_t num_landmarks;275,6733
    int32_t *landmark;landmark276,6760
    int mapped_qs_included;279,6822
    int unmapped_qs_included;280,6850
    int unmapped_placed;281,6880
    int qs_included;282,6905
    int read_names_included;283,6926
    int AP_delta;284,6955
    char substitution_matrix[substitution_matrix286,7016
    cram_block *TD_blk;TD_blk289,7098
    int nTL;290,7149
    unsigned char **TL;TL291,7202
    khash_t(292,7278
} cram_block_compression_hdr;305,7762
typedef struct cram_map 307,7793
    int key;308,7819
    enum cram_encoding encoding;309,7856
    int offset;310,7889
    int size;311,7948
    struct cram_codec *codec;codec312,7975
    struct cram_map *next;next313,8005
} cram_map;314,8059
    enum cram_content_type content_type;318,8133
    int32_t ref_seq_id;319,8174
    int32_t ref_seq_start;320,8240
    int32_t ref_seq_span;321,8306
    int32_t num_records;322,8372
    int64_t record_counter;323,8397
    int32_t num_blocks;324,8425
    int32_t num_content_ids;325,8449
    int32_t *block_content_ids;block_content_ids326,8478
    int32_t ref_base_id;327,8510
    unsigned char md5[md5328,8576
} cram_block_slice_hdr;329,8603
    int32_t  length;343,8954
    int32_t  ref_seq_id;344,8975
    int32_t  ref_seq_start;345,9000
    int32_t  ref_seq_span;346,9028
    int64_t  record_counter;347,9055
    int64_t  num_bases;348,9084
    int32_t  num_records;349,9108
    int32_t  num_blocks;350,9134
    int32_t  num_landmarks;351,9159
    int32_t *landmark;landmark352,9187
    size_t   offset;355,9252
    cram_block_compression_hdr *comp_hdr;comp_hdr358,9334
    cram_block *comp_hdr_block;comp_hdr_block359,9376
    int max_slice,362,9445
    int max_slice, curr_slice;362,9445
    int max_rec,363,9506
    int max_rec, curr_rec;363,9506
    int max_c_rec,364,9573
    int max_c_rec, curr_c_rec;364,9573
    int slice_rec;365,9644
    int curr_ref;366,9712
    int last_pos;367,9783
    struct cram_slice **slices,slices368,9840
    struct cram_slice **slices, *slice;slice368,9840
    int pos_sorted;369,9880
    int max_apos;370,9949
    int last_slice;371,10025
    int multi_seq;372,10103
    int unsorted;373,10181
    int ref_start,376,10295
    int ref_start, first_base,376,10295
    int ref_start, first_base, last_base,376,10295
    int ref_start, first_base, last_base, ref_id,376,10295
    int ref_start, first_base, last_base, ref_id, ref_end;376,10295
    char *ref;ref377,10354
    bam_seq_t **bams;bams381,10429
    cram_stats *stats[stats384,10486
    khash_t(386,10518
} cram_container;390,10697
    struct cram_slice *s;s396,10764
    int32_t ref_id;398,10825
    int32_t flags;399,10883
    int32_t cram_flags;400,10915
    int32_t len;401,10947
    int32_t apos;402,10979
    int32_t rg;403,11011
    int32_t name;404,11043
    int32_t name_len;405,11096
    int32_t mate_line;406,11118
    int32_t mate_ref_id;407,11176
    int32_t mate_pos;408,11201
    int32_t tlen;409,11233
    int32_t ntags;412,11288
    int32_t aux;413,11320
    int32_t aux_size;414,11367
    int32_t TN_idx;416,11454
    int32_t tn;418,11507
    int     TL;420,11560
    int32_t seq;422,11577
    int32_t qual;423,11625
    int32_t cigar;424,11673
    int32_t ncigar;425,11718
    int32_t aend;426,11738
    int32_t mqual;427,11781
    int32_t feature;429,11814
    int32_t nfeature;430,11861
    int32_t mate_flags;431,11909
} cram_record;432,11941
#define cram_qname(435,12007
#define cram_seq(436,12069
#define cram_qual(437,12130
#define cram_aux(438,12192
#define cram_seqi(439,12252
#define cram_name_len(440,12298
#define cram_strand(441,12339
#define cram_mstrand(442,12399
#define cram_cigar(443,12460
	    int pos;452,12694
	    int code;453,12708
	    int base;454,12723
	} X;455,12762
	    int pos;457,12778
	    int code;458,12792
	    int base;459,12807
	    int qual;460,12847
	} B;461,12862
	    int pos;463,12878
	    int code;464,12892
	    int seq_idx;465,12907
	    int len;466,12949
	} b;467,12963
	    int pos;469,12979
	    int code;470,12993
	    int qual;471,13008
	} Q;472,13023
	    int pos;474,13039
	    int code;475,13053
	    int len;476,13068
	    int seq_idx;477,13082
	} S;478,13128
	    int pos;480,13144
	    int code;481,13158
	    int len;482,13173
	    int seq_idx;483,13187
	} I;484,13233
	    int pos;486,13249
	    int code;487,13263
	    int base;488,13278
	} i;489,13318
	    int pos;491,13334
	    int code;492,13348
	    int len;493,13363
	} D;494,13377
	    int pos;496,13393
	    int code;497,13407
	    int len;498,13422
	} N;499,13436
	    int pos;501,13452
	    int code;502,13466
	    int len;503,13481
	} P;504,13495
	    int pos;506,13511
	    int code;507,13525
	    int len;508,13540
	} H;509,13554
} cram_feature;511,13567
typedef struct cram_slice 518,13703
    cram_block_slice_hdr *hdr;hdr519,13731
    cram_block *hdr_block;hdr_block520,13762
    cram_block **block;block521,13789
    cram_block **block_by_id;block_by_id522,13813
    int last_apos,525,13890
    int last_apos, max_apos;525,13890
    cram_record *crecs;crecs528,13960
    uint32_t  *cigar;cigar533,14076
    uint32_t   cigar_alloc;534,14098
    uint32_t   ncigar;535,14126
    cram_feature *features;features537,14150
    int           nfeatures;538,14178
    int           afeatures;539,14207
    uint32_t      *TN;TN543,14314
    int           nTN,544,14337
    int           nTN, aTN;544,14337
    cram_block *tn_blk;tn_blk546,14408
    int tn_id;547,14432
    cram_block *name_blk;name_blk551,14524
    cram_block *seqs_blk;seqs_blk552,14550
    cram_block *qual_blk;qual_blk553,14576
    cram_block *base_blk;base_blk554,14602
    cram_block *soft_blk;soft_blk555,14628
    cram_block *aux_blk;aux_blk556,14654
    cram_block *aux_OQ_blk;aux_OQ_blk557,14679
    cram_block *aux_BQ_blk;aux_BQ_blk558,14707
    cram_block *aux_BD_blk;aux_BD_blk559,14735
    cram_block *aux_BI_blk;aux_BI_blk560,14763
    cram_block *aux_FZ_blk;aux_FZ_blk561,14791
    cram_block *aux_oq_blk;aux_oq_blk562,14819
    cram_block *aux_os_blk;aux_os_blk563,14847
    cram_block *aux_oz_blk;aux_oz_blk564,14875
    string_alloc_t *pair_keys;pair_keys566,14904
    khash_t(567,14965
} cram_slice;573,15253
typedef struct ref_entry 579,15446
    char *name;name580,15473
    char *fn;fn581,15489
    int64_t length;582,15503
    int64_t offset;583,15523
    int bases_per_line;584,15543
    int line_length;585,15567
    int64_t count;586,15588
    char *seq;seq587,15661
} ref_entry;588,15676
KHASH_MAP_INIT_STR(590,15690
    string_alloc_t *pool;pool594,15770
    khash_t(596,15847
} refs_t;608,16381
typedef struct cram_index 624,17013
    int nslice,625,17041
    int nslice, nalloc;625,17041
    struct cram_index *e;e626,17093
    int     refid;628,17144
    int     start;629,17191
    int     end;630,17238
    int     nseq;631,17285
    int     slice;632,17327
    int     len;633,17389
    int64_t offset;634,17461
} cram_index;635,17508
    int refid;638,17540
    int start;639,17555
    int end;640,17570
} cram_range;641,17583
typedef struct spare_bams 647,17706
    bam_seq_t **bams;bams648,17734
    struct spare_bams *next;next649,17756
} spare_bams;650,17785
typedef struct cram_fd 652,17800
    struct hFILE  *fp;fp653,17825
    int            mode;654,17848
    int            version;655,17891
    cram_file_def *file_def;file_def656,17919
    SAM_hdr       *header;header657,17948
    char          *prefix;prefix659,17976
    int64_t        record_counter;660,18003
    int            err;661,18038
    cram_container *ctr;ctr668,18241
    int first_base,671,18309
    int first_base, last_base;671,18309
    refs_t *refs;refs674,18373
    char *ref,ref675,18431
    char *ref, *ref_free;ref_free675,18431
    int   ref_id;676,18496
    int   ref_start;677,18514
    int   ref_end;678,18535
    char *ref_fn;ref_fn679,18554
    int level;682,18640
    cram_metrics *m[m683,18655
    int decode_md;686,18700
    int verbose;687,18755
    int seqs_per_slice;688,18772
    int slices_per_container;689,18796
    int embed_ref;690,18826
    int no_ref;691,18845
    int ignore_md5;692,18861
    int use_bz2;693,18881
    int use_rans;694,18898
    int use_lzma;695,18916
    int shared_ref;696,18934
    unsigned int required_fields;697,18954
    cram_range range;698,18988
    unsigned int bam_flag_swap[bam_flag_swap701,19083
    unsigned int cram_flag_swap[cram_flag_swap702,19144
    unsigned char L1[L1703,19205
    unsigned char L2[L2704,19266
    char cram_sub_matrix[cram_sub_matrix705,19328
    int         index_sz;707,19389
    cram_index *index;index708,19415
    off_t first_container;709,19481
    int eof;710,19508
    int last_slice;711,19521
    int multi_seq;712,19601
    int unsorted;713,19620
    int empty_container;714,19638
    int own_pool;717,19713
    t_pool *pool;pool718,19731
    t_results_queue *rqueue;rqueue719,19749
    pthread_mutex_t metrics_lock;720,19778
    pthread_mutex_t ref_lock;721,19812
    spare_bams *bl;bl722,19842
    pthread_mutex_t bam_list_lock;723,19862
    void *job_pending;job_pending724,19897
    int ooc;725,19920
} cram_fd;726,19982
enum cram_fields 729,20048
    CRAM_BF 730,20067
    CRAM_BF = 0x00000001,x00000001730,20067
    CRAM_AP 731,20093
    CRAM_AP = 0x00000002,x00000002731,20093
    CRAM_FP 732,20119
    CRAM_FP = 0x00000004,x00000004732,20119
    CRAM_RL 733,20145
    CRAM_RL = 0x00000008,x00000008733,20145
    CRAM_DL 734,20171
    CRAM_DL = 0x00000010,x00000010734,20171
    CRAM_NF 735,20197
    CRAM_NF = 0x00000020,x00000020735,20197
    CRAM_BA 736,20223
    CRAM_BA = 0x00000040,x00000040736,20223
    CRAM_QS 737,20249
    CRAM_QS = 0x00000080,x00000080737,20249
    CRAM_FC 738,20275
    CRAM_FC = 0x00000100,x00000100738,20275
    CRAM_FN 739,20301
    CRAM_FN = 0x00000200,x00000200739,20301
    CRAM_BS 740,20327
    CRAM_BS = 0x00000400,x00000400740,20327
    CRAM_IN 741,20353
    CRAM_IN = 0x00000800,x00000800741,20353
    CRAM_RG 742,20379
    CRAM_RG = 0x00001000,x00001000742,20379
    CRAM_MQ 743,20405
    CRAM_MQ = 0x00002000,x00002000743,20405
    CRAM_TL 744,20431
    CRAM_TL = 0x00004000,x00004000744,20431
    CRAM_RN 745,20457
    CRAM_RN = 0x00008000,x00008000745,20457
    CRAM_NS 746,20483
    CRAM_NS = 0x00010000,x00010000746,20483
    CRAM_NP 747,20509
    CRAM_NP = 0x00020000,x00020000747,20509
    CRAM_TS 748,20535
    CRAM_TS = 0x00040000,x00040000748,20535
    CRAM_MF 749,20561
    CRAM_MF = 0x00080000,x00080000749,20561
    CRAM_CF 750,20587
    CRAM_CF = 0x00100000,x00100000750,20587
    CRAM_RI 751,20613
    CRAM_RI = 0x00200000,x00200000751,20613
    CRAM_RS 752,20639
    CRAM_RS = 0x00400000,x00400000752,20639
    CRAM_PD 753,20665
    CRAM_PD = 0x00800000,x00800000753,20665
    CRAM_HC 754,20691
    CRAM_HC = 0x01000000,x01000000754,20691
    CRAM_SC 755,20717
    CRAM_SC = 0x02000000,x02000000755,20717
    CRAM_BB 756,20743
    CRAM_BB = 0x04000000,x04000000756,20743
    CRAM_BB_len 757,20769
    CRAM_BB_len = 0x08000000,x08000000757,20769
    CRAM_QQ 758,20799
    CRAM_QQ = 0x10000000,x10000000758,20799
    CRAM_QQ_len 759,20825
    CRAM_QQ_len = 0x20000000,x20000000759,20825
    CRAM_aux=760,20855
    CRAM_aux= 0x40000000,x40000000760,20855
    CRAM_ALL=761,20881
    CRAM_ALL= 0x7fffffff,x7fffffff761,20881
#define CRAM_CIGAR 768,21163
#define CRAM_SEQ 771,21301
#define CRAM_FPAIRED 776,21507
#define CRAM_FPROPER_PAIR 777,21537
#define CRAM_FUNMAP 778,21567
#define CRAM_FREVERSE 779,21597
#define CRAM_FREAD1 780,21627
#define CRAM_FREAD2 781,21657
#define CRAM_FSECONDARY 782,21687
#define CRAM_FQCFAIL 783,21717
#define CRAM_FDUP 784,21747
#define DS_aux_S 786,21778
#define DS_aux_OQ_S 787,21802
#define DS_aux_BQ_S 788,21829
#define DS_aux_BD_S 789,21856
#define DS_aux_BI_S 790,21883
#define DS_aux_FZ_S 791,21910
#define DS_aux_oq_S 792,21937
#define DS_aux_os_S 793,21964
#define DS_aux_oz_S 794,21991
#define CRAM_M_REVERSE 796,22019
#define CRAM_M_UNMAP 797,22045
#define CRAM_FLAG_PRESERVE_QUAL_SCORES 801,22092
#define CRAM_FLAG_DETACHED 802,22138
#define CRAM_FLAG_MATE_DOWNSTREAM 803,22184

cram/mFILE.h,407
#define _MFILE_H_32,1598
    FILE *fp;fp41,1694
    char *data;data42,1708
    size_t alloced;43,1724
    int eof;44,1744
    int mode;45,1757
    size_t size;46,1815
    size_t offset;47,1832
    size_t flush_pos;48,1851
} mFILE;49,1873
#define MF_READ 51,1883
#define MF_WRITE 52,1904
#define MF_APPEND 53,1925
#define MF_BINARY 54,1946
#define MF_TRUNC 55,1967
#define MF_MODEX 56,1988

cram/md5.h,324
#define _MD5_H33,1033
typedef unsigned int MD5_u32plus;36,1111
	MD5_u32plus lo,39,1164
	MD5_u32plus lo, hi;39,1164
	MD5_u32plus a,40,1185
	MD5_u32plus a, b,40,1185
	MD5_u32plus a, b, c,40,1185
	MD5_u32plus a, b, c, d;40,1185
	unsigned char buffer[buffer41,1210
	MD5_u32plus block[block42,1237
} MD5_CTX;43,1261

cram/misc.h,213
#define _misc_h64,3169
#    define __NORETURN__ 83,3637
#    define __NORETURN__85,3699
#    define __PRINTF_FORMAT__(94,3938
#    define __PRINTF_FORMAT__(96,4019
#define MIN(103,4163
#define MAX(104,4210

cram/open_trace_file.h,36
#define _OPEN_TRACE_FILE_H_65,3199

cram/os.h,1443
#define _OS_H_76,3390
#define SP_LITTLE_ENDIAN92,3770
#    undef SP_BIG_ENDIAN102,4142
#  define SP_LITTLE_ENDIAN104,4176
#    undef SP_LITTLE_ENDIAN112,4306
#  define SP_BIG_ENDIAN114,4343
#    undef SP_LITTLE_ENDIAN122,4470
#  define SP_BIG_ENDIAN124,4507
#    undef SP_LITTLE_ENDIAN132,4628
#  define SP_BIG_ENDIAN134,4665
#    define SP_LITTLE_ENDIAN139,4779
#    define SP_BIG_ENDIAN143,4870
#  define ALLOW_UAC163,5651
#define iswap_int8(178,6091
#define iswap_int4(188,6465
#define iswap_int2(194,6623
#    undef iswap_int8206,6969
#    undef iswap_int4207,6991
#    undef iswap_int2208,7013
#    define iswap_int8 209,7035
#    define iswap_int4 210,7067
#    define iswap_int2 211,7099
#define le_int4(227,7565
#define le_int2(228,7600
#define le_int4(232,7667
#define le_int2(233,7690
#define __PRI64__ 241,7877
#define PRId64 242,7899
#define PRId32 243,7928
#define PRId16 244,7947
#define PRId8 245,7966
#define PRIu64 246,7985
#define PRIu32 247,8014
#define PRIu16 248,8033
#define PRIu8 249,8052
#define SEEK_SET 262,8443
#define SEEK_CUR 263,8462
#define SEEK_END 264,8481
#define popen 272,8572
#define pclose 273,8593
#define ftruncate(274,8616
#define sysconf(283,8787
#define ftruncate(284,8810
#      define off_t 292,9042
#      define fseeko 293,9070
#      define ftello 294,9101
#      define off_t 297,9202
#      define fseeko 298,9227
#      define ftello 299,9254

cram/pooled_alloc.h,247
#define _POOLED_ALLOC_H_32,1585
    void   *pool;pool39,1738
    size_t  used;40,1756
} pool_t;41,1774
    size_t dsize;44,1802
    size_t npools;45,1820
    pool_t *pools;pools46,1839
    void *free;free47,1858
} pool_alloc_t;48,1874

cram/rANS_byte.h,1051
#define RANS_BYTE_HEADER16,582
#define RansAssert 21,643
#define RansAssert(23,675
#define RANS_BYTE_L 59,2573
typedef uint32_t RansState;62,2712
static inline void RansEncInit(65,2771
static inline RansState RansEncRenorm(71,2890
static inline void RansEncPut(92,3726
static inline void RansEncFlush(102,4029
static inline void RansDecInit(118,4408
static inline uint32_t RansDecGet(134,4726
static inline void RansDecAdvance(142,5074
    uint32_t x_max;169,5873
    uint32_t rcp_freq;170,5954
    uint32_t bias;171,6014
    uint16_t cmpl_freq;172,6046
    uint16_t rcp_shift;173,6123
} RansEncSymbol;174,6167
    uint16_t start;178,6242
    uint16_t freq;179,6285
} RansDecSymbol;180,6330
static inline void RansEncSymbolInit(183,6419
static inline void RansDecSymbolInit(257,9301
static inline void RansEncPutSymbol(269,9720
static inline void RansDecAdvanceSymbol(298,10648
static inline void RansDecAdvanceStep(306,11041
static inline void RansDecAdvanceSymbolStep(316,11348
static inline void RansDecRenorm(322,11536

cram/rANS_static.h,30
#define RANS_STATIC_H36,1692

cram/sam_header.h,1095
#define _SAM_HDR_H_48,1908
#define KS_INITIALIZER 67,2226
#define KS_INIT(70,2311
#define KS_FREE(73,2440
typedef struct SAM_hdr_tag_s 109,3321
    struct SAM_hdr_tag_s *next;next110,3352
    char *str;str111,3384
    int   len;112,3399
} SAM_hdr_tag;113,3414
typedef struct SAM_hdr_item_s 130,4100
    struct SAM_hdr_item_s *next;next131,4132
    struct SAM_hdr_item_s *prev;prev132,4176
    SAM_hdr_tag *tag;tag133,4209
    int order;134,4255
} SAM_hdr_type;135,4301
    char *name;name139,4360
    uint32_t len;140,4376
    SAM_hdr_type *ty;ty141,4394
    SAM_hdr_tag  *tag;tag142,4416
} SAM_SQ;143,4439
    char *name;name147,4492
    SAM_hdr_type *ty;ty148,4508
    SAM_hdr_tag  *tag;tag149,4530
    int name_len;150,4553
    int id;151,4571
} SAM_RG;152,4609
    char *name;name156,4662
    SAM_hdr_type *ty;ty157,4678
    SAM_hdr_tag  *tag;tag158,4700
    int name_len;159,4723
    int id;160,4741
    int prev_id;161,4779
} SAM_PG;162,4815
KHASH_MAP_INIT_INT(164,4826
    kstring_t text;180,5456
    khash_t(181,5533
} SAM_hdr;209,6733

cram/string_alloc.h,230
#define _STRING_ALLOC_H_32,1590
    char *str;str48,1852
    size_t used;49,1867
} string_t;50,1884
    size_t max_length;53,1914
    size_t nstrings;54,1937
    string_t *strings;strings55,1958
} string_alloc_t;56,1981

cram/thread_pool.h,1568
#define _THREAD_POOL_H_48,2286
typedef struct t_pool_job 55,2373
    void *(*func)func56,2401
    void *arg;arg57,2431
    struct t_pool_job *next;next58,2446
    struct t_pool *p;p60,2476
    struct t_results_queue *q;q61,2498
    int serial;62,2529
} t_pool_job;63,2545
typedef struct t_res 65,2560
    struct t_res *next;next66,2583
    int serial;67,2607
    void *data;data68,2657
} t_pool_result;69,2690
    struct t_pool *p;p74,2741
    int idx;75,2763
    pthread_t tid;76,2776
    pthread_cond_t  pending_c;77,2795
    long long wait_time;78,2826
} t_pool_worker_t;79,2851
typedef struct t_pool 81,2871
    int qsize;82,2895
    int njobs;83,2930
    int nwaiting;84,2969
    int shutdown;85,3028
    t_pool_job *head,head88,3111
    t_pool_job *head, *tail;tail88,3111
    int tsize;91,3156
    t_pool_worker_t *t;t92,3200
    pthread_mutex_t pool_m;95,3240
    pthread_cond_t  empty_c;97,3301
    pthread_cond_t  pending_c;98,3330
    pthread_cond_t  full_c;99,3374
    int *t_stack,t_stack102,3435
    int *t_stack, t_stack_top;102,3435
    long long total_time,105,3503
    long long total_time, wait_time;105,3503
} t_pool;106,3540
typedef struct t_results_queue 108,3551
    t_pool_result *result_head;result_head109,3584
    t_pool_result *result_tail;result_tail110,3616
    int next_serial;111,3648
    int curr_serial;112,3669
    int queue_len;113,3690
    int pending;114,3738
    pthread_mutex_t result_m;115,3815
    pthread_cond_t result_avail_c;116,3845
} t_results_queue;117,3880

cram/vlen.h,25
#define _VLEN_H_35,1631

cram/zfio.h,91
#define _ZFIO_H_32,1586
    FILE   *fp;fp41,1696
    gzFile  gz;42,1712
} zfp;43,1728

htslib/bgzf.h,1521
#define HTSLIB_BGZF_H30,1458
#define BGZF_BLOCK_SIZE 37,1562
#define BGZF_MAX_BLOCK_SIZE 38,1663
#define BGZF_ERR_ZLIB 40,1700
#define BGZF_ERR_HEADER 41,1726
#define BGZF_ERR_IO 42,1752
#define BGZF_ERR_MISUSE 43,1778
typedef struct __bgzidx_t bgzidx_t;47,1840
struct BGZF 49,1877
    int errcode:errcode50,1891
    int errcode:16, is_write:is_write50,1891
    int errcode:16, is_write:2, is_be:is_be50,1891
    int errcode:16, is_write:2, is_be:2, compress_level:compress_level50,1891
    int errcode:16, is_write:2, is_be:2, compress_level:9, is_compressed:is_compressed50,1891
    int errcode:16, is_write:2, is_be:2, compress_level:9, is_compressed:2, is_gzip:is_gzip50,1891
    int cache_size;51,1978
    int block_length,52,1998
    int block_length, block_offset;52,1998
    int64_t block_address,53,2034
    int64_t block_address, uncompressed_address;53,2034
    void *uncompressed_block,uncompressed_block54,2083
    void *uncompressed_block, *compressed_block;compressed_block54,2083
    void *cache;cache55,2132
    struct hFILE *fp;fp56,2178
    struct bgzf_mtaux_t *mt;mt57,2222
    bgzidx_t *idx;idx58,2284
    int idx_build_otf;59,2322
    z_stream *gz_stream;gz_stream60,2404
typedef struct BGZF BGZF;63,2485
#define HTS_BGZF_TYPEDEF64,2511
#define KSTRING_T 68,2562
typedef struct __kstring_t 69,2590
    size_t l,70,2619
    size_t l, m;70,2619
    char *s;s71,2636
} kstring_t;72,2649
    #define bgzf_fdopen(98,3508
    #define bgzf_tell(174,6234

htslib/faidx.h,73
#define HTSLIB_FAIDX_H29,1238
typedef struct __faidx_t faidx_t;49,1790

htslib/hfile.h,642
#define HTSLIB_HFILE_H26,1205
typedef struct hFILE 42,1595
    char *buffer,buffer43,1618
    char *buffer, *begin,begin43,1618
    char *buffer, *begin, *end,end43,1618
    char *buffer, *begin, *end, *limit;limit43,1618
    const struct hFILE_backend *backend;backend44,1658
    off_t offset;45,1699
    int at_eof:at_eof46,1717
    int has_errno;47,1735
} hFILE;48,1754
hFILE *hopen(hopen54,1901
static inline void hclearerr(96,3363
off_t hseek(106,3600
static inline int hgetc(121,3994
ssize_t hpeek(138,4727
static inline int hputc(162,5494
static inline int hputs(174,5779
hwrite(191,6340
int hflush(206,6807

htslib/hts.h,6027
#define HTSLIB_HTS_H27,1251
typedef struct BGZF BGZF;33,1339
#define HTS_BGZF_TYPEDEF34,1365
#define KSTRING_T 40,1446
typedef struct __kstring_t 41,1474
    size_t l,42,1503
    size_t l, m;42,1503
    char *s;s43,1520
} kstring_t;44,1533
#define kroundup32(48,1573
#define hts_expand(58,1922
#define hts_expand0(62,2086
enum htsFormatCategory 75,2504
    unknown_category,76,2529
    sequence_data,77,2551
    variant_data,78,2613
    index_file,79,2676
    region_list,80,2743
    category_maximum 81,2812
enum htsExactFormat 84,2845
    unknown_format,85,2867
    binary_format,86,2887
    binary_format, text_format,86,2887
    sam,87,2919
    sam, bam,87,2919
    sam, bam, bai,87,2919
    sam, bam, bai, cram,87,2919
    sam, bam, bai, cram, crai,87,2919
    sam, bam, bai, cram, crai, vcf,87,2919
    sam, bam, bai, cram, crai, vcf, bcf,87,2919
    sam, bam, bai, cram, crai, vcf, bcf, csi,87,2919
    sam, bam, bai, cram, crai, vcf, bcf, csi, gzi,87,2919
    sam, bam, bai, cram, crai, vcf, bcf, csi, gzi, tbi,87,2919
    sam, bam, bai, cram, crai, vcf, bcf, csi, gzi, tbi, bed,87,2919
    format_maximum 88,2980
enum htsCompression 91,3011
    no_compression,92,3033
    no_compression, gzip,92,3033
    no_compression, gzip, bgzf,92,3033
    no_compression, gzip, bgzf, custom,92,3033
    compression_maximum 93,3073
typedef struct htsFormat 96,3109
    enum htsFormatCategory category;97,3136
    enum htsExactFormat format;98,3173
    struct { short major,99,3205
    struct { short major, minor;99,3205
    struct { short major, minor; } version;99,3205
    enum htsCompression compression;100,3249
    short compression_level;101,3286
    void *specific;specific102,3336
} htsFormat;103,3377
    uint32_t is_bin:is_bin113,3908
    uint32_t is_bin:1, is_write:is_write113,3908
    uint32_t is_bin:1, is_write:1, is_be:is_be113,3908
    uint32_t is_bin:1, is_write:1, is_be:1, is_cram:is_cram113,3908
    uint32_t is_bin:1, is_write:1, is_be:1, is_cram:1, dummy:dummy113,3908
    int64_t lineno;114,3973
    kstring_t line;115,3993
    char *fn,fn116,4013
    char *fn, *fn_aux;fn_aux116,4013
        BGZF *bgzf;bgzf118,4048
        struct cram_fd *cram;cram119,4068
        struct hFILE *hfile;hfile120,4098
        void *voidp;voidp121,4127
    } fp;122,4148
    htsFormat format;123,4158
} htsFile;124,4180
enum sam_fields 127,4211
    SAM_QNAME 128,4229
    SAM_QNAME = 0x00000001,x00000001128,4229
    SAM_FLAG 129,4257
    SAM_FLAG  = 0x00000002,x00000002129,4257
    SAM_RNAME 130,4285
    SAM_RNAME = 0x00000004,x00000004130,4285
    SAM_POS 131,4313
    SAM_POS   = 0x00000008,x00000008131,4313
    SAM_MAPQ 132,4341
    SAM_MAPQ  = 0x00000010,x00000010132,4341
    SAM_CIGAR 133,4369
    SAM_CIGAR = 0x00000020,x00000020133,4369
    SAM_RNEXT 134,4397
    SAM_RNEXT = 0x00000040,x00000040134,4397
    SAM_PNEXT 135,4425
    SAM_PNEXT = 0x00000080,x00000080135,4425
    SAM_TLEN 136,4453
    SAM_TLEN  = 0x00000100,x00000100136,4453
    SAM_SEQ 137,4481
    SAM_SEQ   = 0x00000200,x00000200137,4481
    SAM_QUAL 138,4509
    SAM_QUAL  = 0x00000400,x00000400138,4509
    SAM_AUX 139,4537
    SAM_AUX   = 0x00000800,x00000800139,4537
    SAM_RGAUX 140,4565
    SAM_RGAUX = 0x00001000,x00001000140,4565
enum cram_option 143,4597
    CRAM_OPT_DECODE_MD,144,4616
    CRAM_OPT_PREFIX,145,4640
    CRAM_OPT_VERBOSITY,146,4661
    CRAM_OPT_SEQS_PER_SLICE,147,4685
    CRAM_OPT_SLICES_PER_CONTAINER,148,4714
    CRAM_OPT_RANGE,149,4749
    CRAM_OPT_VERSION,150,4769
    CRAM_OPT_EMBED_REF,151,4791
    CRAM_OPT_IGNORE_MD5,152,4815
    CRAM_OPT_REFERENCE,153,4840
    CRAM_OPT_MULTI_SEQ_PER_SLICE,154,4864
    CRAM_OPT_NO_REF,155,4898
    CRAM_OPT_USE_BZIP2,156,4919
    CRAM_OPT_SHARED_REF,157,4943
    CRAM_OPT_NTHREADS,158,4968
    CRAM_OPT_THREAD_POOL,159,4991
    CRAM_OPT_USE_LZMA,160,5017
    CRAM_OPT_USE_RANS,161,5040
    CRAM_OPT_REQUIRED_FIELDS,162,5063
#define HTS_IDX_NOCOOR 317,10482
#define HTS_IDX_START 318,10510
#define HTS_IDX_REST 319,10538
#define HTS_IDX_NONE 320,10566
#define HTS_FMT_CSI 322,10595
#define HTS_FMT_BAI 323,10617
#define HTS_FMT_TBI 324,10639
#define HTS_FMT_CRAI 325,10661
typedef struct __hts_idx_t hts_idx_t;328,10705
    uint64_t u,331,10761
    uint64_t u, v;331,10761
} hts_pair64_t;332,10780
typedef int hts_readrec_func(334,10797
    uint32_t read_rest:read_rest337,10906
    uint32_t read_rest:1, finished:finished337,10906
    uint32_t read_rest:1, finished:1, dummy:dummy337,10906
    int tid,338,10954
    int tid, beg,338,10954
    int tid, beg, end,338,10954
    int tid, beg, end, n_off,338,10954
    int tid, beg, end, n_off, i;338,10954
    int curr_tid,339,10987
    int curr_tid, curr_beg,339,10987
    int curr_tid, curr_beg, curr_end;339,10987
    uint64_t curr_off;340,11025
    hts_pair64_t *off;off341,11048
    hts_readrec_func *readrec;readrec342,11071
        int n,344,11115
        int n, m;344,11115
        int *a;a345,11133
    } bins;346,11149
} hts_itr_t;347,11161
    #define hts_bin_first(353,11215
    #define hts_bin_parent(354,11278
    typedef int (*hts_name2id_f)hts_name2id_f374,12259
    typedef const char *(*hts_id2name_f)hts_id2name_f375,12313
    typedef hts_itr_t *hts_itr_query_func(hts_itr_query_func376,12367
    #define FT_UNKN 387,13091
    #define FT_GZ 388,13115
    #define FT_VCF 389,13139
    #define FT_VCF_GZ 390,13163
    #define FT_BCF 391,13200
    #define FT_BCF_GZ 392,13229
    #define FT_STDIN 393,13266
static inline int hts_reg2bin(401,13368
static inline int hts_bin_bot(409,13658
static inline int ed_is_big(420,13920
static inline uint16_t ed_swap_2(425,14008
static inline void *ed_swap_2p(ed_swap_2p429,14133
static inline uint32_t ed_swap_4(434,14237
static inline void *ed_swap_4p(ed_swap_4p439,14397
static inline uint64_t ed_swap_8(444,14501
static inline void *ed_swap_8p(ed_swap_8p450,14774

htslib/hts_defs.h,213
#define HTSLIB_HTS_DEFS_H26,1197
#define HTS_NORETURN 29,1267
#define HTS_NORETURN31,1325
#define HTS_RESULT_USED 36,1488
#define HTS_RESULT_USED38,1559
#define HTS_UNUSED 42,1633
#define HTS_UNUSED44,1687

htslib/kfunc.h,31
#define HTSLIB_KFUNC_H28,1233

htslib/khash.h,2173
#define __AC_KHASH_H118,3396
#define AC_VERSION_KHASH_H 126,3468
typedef unsigned int khint32_t;135,3632
typedef unsigned long khint32_t;137,3695
typedef unsigned long khint64_t;141,3764
typedef unsigned long long khint64_t;143,3803
#define kh_inline 148,3883
#define kh_inline 150,3916
typedef khint32_t khint_t;154,3972
typedef khint_t khiter_t;155,3999
#define __ac_isempty(157,4026
#define __ac_isdel(158,4088
#define __ac_iseither(159,4148
#define __ac_set_isdel_false(160,4211
#define __ac_set_isempty_false(161,4285
#define __ac_set_isboth_false(162,4361
#define __ac_set_isdel_true(163,4436
#define __ac_fsize(165,4507
#define kroundup32(168,4572
#define kcalloc(172,4699
#define kmalloc(175,4755
#define krealloc(178,4808
#define kfree(181,4864
static const double __ac_HASH_UPPER 184,4897
#define __KHASH_TYPE(186,4942
#define __KHASH_PROTOTYPES(194,5156
#define __KHASH_IMPL(203,5655
#define KHASH_DECLARE(349,12297
#define KHASH_INIT2(353,12445
#define KHASH_INIT(357,12668
#define kh_int_hash_func(367,13021
#define kh_int_hash_equal(371,13130
#define kh_int64_hash_func(377,13319
#define kh_int64_hash_equal(381,13459
static kh_inline khint_t __ac_X31_hash_string(387,13649
#define kh_str_hash_func(398,13999
#define kh_str_hash_equal(402,14121
static kh_inline khint_t __ac_Wang_hash(404,14174
#define kh_int_hash_func2(414,14395
#define khash_t(424,14617
#define kh_init(431,14818
#define kh_destroy(438,15021
#define kh_clear(445,15260
#define kh_resize(453,15503
#define kh_put(466,16060
#define kh_get(475,16421
#define kh_del(483,16708
#define kh_exist(491,16991
#define kh_key(499,17252
#define kh_val(508,17563
#define kh_value(513,17652
#define kh_begin(520,17852
#define kh_end(527,18043
#define kh_size(534,18280
#define kh_n_buckets(541,18511
#define kh_foreach(550,18842
#define kh_foreach_value(564,19326
#define KHASH_SET_INIT_INT(577,19704
#define KHASH_MAP_INIT_INT(585,19994
#define KHASH_SET_INIT_INT64(592,20260
#define KHASH_MAP_INIT_INT64(600,20563
typedef const char *kh_cstr_t;kh_cstr_t603,20699
#define KHASH_SET_INIT_STR(608,20863
#define KHASH_MAP_INIT_STR(616,21157

htslib/khash_str2int.h,404
#define HTSLIB_KHASH_STR2INT_H26,1205
KHASH_MAP_INIT_STR(30,1264
static inline void khash_str2int_destroy(44,1494
static inline void khash_str2int_destroy_free(53,1742
static inline int khash_str2int_has_key(66,2081
static inline int khash_str2int_get(78,2430
static inline int khash_str2int_inc(96,2999
static inline int khash_str2int_set(113,3514
static inline int khash_str2int_size(127,3847

htslib/klist.h,488
#define _AC_KLIST_H27,1190
#define KMEMPOOL_INIT(31,1232
#define kmempool_t(60,2343
#define kmp_init(61,2383
#define kmp_destroy(62,2424
#define kmp_alloc(63,2477
#define kmp_free(64,2526
#define KLIST_INIT(66,2580
#define kliter_t(109,4243
#define klist_t(110,4277
#define kl_val(111,4313
#define kl_next(112,4349
#define kl_begin(113,4386
#define kl_end(114,4420
#define kl_init(116,4453
#define kl_destroy(117,4492
#define kl_pushp(118,4543
#define kl_shift(119,4590

htslib/knetfile.h,1085
#define KNETFILE_H28,1235
#define netread(34,1310
#define netwrite(35,1359
#define netclose(36,1410
#define netread(39,1469
#define netwrite(40,1521
#define netclose(41,1574
#define KNF_TYPE_LOCAL 46,1658
#define KNF_TYPE_FTP 47,1683
#define KNF_TYPE_HTTP 48,1708
typedef struct knetFile_s 50,1734
	int type,51,1762
	int type, fd;51,1762
	int64_t offset;52,1777
	char *host,host53,1794
	char *host, *port;port53,1794
	int ctrl_fd,56,1850
	int ctrl_fd, pasv_ip[pasv_ip56,1850
	int ctrl_fd, pasv_ip[4], pasv_port,56,1850
	int ctrl_fd, pasv_ip[4], pasv_port, max_response,56,1850
	int ctrl_fd, pasv_ip[4], pasv_port, max_response, no_reconnect,56,1850
	int ctrl_fd, pasv_ip[4], pasv_port, max_response, no_reconnect, is_ready;56,1850
	char *response,response57,1925
	char *response, *retr,retr57,1925
	char *response, *retr, *size_cmd;size_cmd57,1925
	int64_t seek_offset;58,1960
    int64_t file_size;59,1999
	char *path,path62,2059
	char *path, *http_host;http_host62,2059
} knetFile;63,2084
#define knet_tell(65,2097
#define knet_fileno(66,2134

htslib/kseq.h,787
#define AC_KSEQ_H29,1223
#define KS_SEP_SPACE 35,1302
#define KS_SEP_TAB 36,1358
#define KS_SEP_LINE 37,1402
#define KS_SEP_MAX 38,1476
#define __KS_TYPE(40,1500
#define ks_eof(49,1692
#define ks_rewind(50,1754
#define __KS_BASIC(52,1822
#define __KS_INLINED(67,2186
#define KSTRING_T 83,2718
typedef struct __kstring_t 84,2746
	size_t l,85,2775
	size_t l, m;85,2775
	char *s;s86,2789
} kstring_t;87,2799
#define kroundup32(91,2839
#define __KS_GETUNTIL(94,2950
#define KSTREAM_INIT2(148,4812
#define KSTREAM_INIT(154,4986
#define KSTREAM_DECLARE(156,5084
#define kseq_rewind(167,5411
#define __KSEQ_BASIC(169,5508
#define __KSEQ_READ(189,6118
#define __KSEQ_TYPE(231,8310
#define KSEQ_INIT2(238,8473
#define KSEQ_INIT(244,8644
#define KSEQ_DECLARE(246,8714

htslib/ksort.h,610
#define AC_KSORT_H62,1881
	void *left,left68,1959
	void *left, *right;right68,1959
	int depth;69,1980
} ks_isort_stack_t;70,1992
#define KSORT_SWAP(72,2013
#define KSORT_INIT(74,2090
#define ks_mergesort(268,9386
#define ks_introsort(269,9451
#define ks_combsort(270,9510
#define ks_heapsort(271,9567
#define ks_heapmake(272,9624
#define ks_heapadjust(273,9681
#define ks_ksmall(274,9748
#define ks_shuffle(275,9807
#define ks_lt_generic(277,9863
#define ks_lt_str(278,9903
typedef const char *ksstr_t;ksstr_t280,9951
#define KSORT_INIT_GENERIC(282,9981
#define KSORT_INIT_STR 283,10058

htslib/kstring.h,863
#define KSTRING_H27,1182
#define kroundup32(36,1320
#define KS_ATTR_PRINTF(40,1489
#define KS_ATTR_PRINTF(42,1579
#define KSTRING_T 55,2127
typedef struct __kstring_t 56,2155
	size_t l,57,2184
	size_t l, m;57,2184
	char *s;s58,2198
} kstring_t;59,2208
	uint64_t tab[tab63,2246
	int sep,64,2264
	int sep, finished;64,2264
	const char *p;p65,2284
} ks_tokaux_t;66,2328
	int kvsprintf(72,2384
static inline char *ks_str(ks_str103,3365
static inline size_t ks_len(108,3425
static inline char *ks_release(ks_release117,3758
static inline int kputsn(125,3870
static inline int kputs(142,4171
static inline int kputc(147,4262
static inline int kputc_(163,4518
static inline int kputsn_(178,4757
static inline int kputw(194,5033
static inline int kputuw(216,5485
static inline int kputl(237,5922
static inline int *ksplit(ksplit263,6485

htslib/regidx.h,501
#define HTSLIB_REGIDX_H52,2198
typedef struct _regidx_t regidx_t;57,2265
    uint32_t start,60,2317
    uint32_t start, end;60,2317
reg_t;62,2344
    int i,65,2368
    int i, n;65,2368
    reg_t *reg;reg66,2382
    void *payload;payload67,2398
regitr_t;69,2419
#define REGITR_START(71,2430
#define REGITR_END(72,2481
#define REGITR_PAYLOAD(73,2530
#define REGITR_OVERLAP(74,2599
typedef int  (*regidx_parse_f)regidx_parse_f88,3352
typedef void (*regidx_free_f)regidx_free_f89,3472

htslib/sam.h,3113
#define HTSLIB_SAM_H27,1256
    int32_t n_targets,47,1758
    int32_t n_targets, ignore_sam_err;47,1758
    uint32_t l_text;48,1797
    uint32_t *target_len;target_len49,1818
    int8_t *cigar_tab;cigar_tab50,1844
    char **target_name;target_name51,1867
    char *text;text52,1891
    void *sdict;sdict53,1907
} bam_hdr_t;54,1924
#define BAM_CMATCH 60,2030
#define BAM_CINS 61,2056
#define BAM_CDEL 62,2082
#define BAM_CREF_SKIP 63,2108
#define BAM_CSOFT_CLIP 64,2134
#define BAM_CHARD_CLIP 65,2160
#define BAM_CPAD 66,2186
#define BAM_CEQUAL 67,2212
#define BAM_CDIFF 68,2238
#define BAM_CBACK 69,2264
#define BAM_CIGAR_STR 71,2291
#define BAM_CIGAR_SHIFT 72,2328
#define BAM_CIGAR_MASK 73,2354
#define BAM_CIGAR_TYPE 74,2382
#define bam_cigar_op(76,2415
#define bam_cigar_oplen(77,2460
#define bam_cigar_opchr(78,2510
#define bam_cigar_gen(79,2570
#define bam_cigar_type(100,3251
#define BAM_FPAIRED 103,3449
#define BAM_FPROPER_PAIR 105,3531
#define BAM_FUNMAP 107,3640
#define BAM_FMUNMAP 109,3707
#define BAM_FREVERSE 111,3794
#define BAM_FMREVERSE 113,3881
#define BAM_FREAD1 115,3941
#define BAM_FREAD2 117,4001
#define BAM_FSECONDARY 119,4069
#define BAM_FQCFAIL 121,4126
#define BAM_FDUP 123,4197
#define BAM_FSUPPLEMENTARY 125,4267
    int32_t tid;145,4967
    int32_t pos;146,4984
    uint32_t bin:bin147,5001
    uint32_t bin:16, qual:qual147,5001
    uint32_t bin:16, qual:8, l_qname:l_qname147,5001
    uint32_t flag:flag148,5041
    uint32_t flag:16, n_cigar:n_cigar148,5041
    int32_t l_qseq;149,5075
    int32_t mtid;150,5095
    int32_t mpos;151,5113
    int32_t isize;152,5131
} bam1_core_t;153,5150
    bam1_core_t core;171,5793
    int l_data,172,5815
    int l_data, m_data;172,5815
    uint8_t *data;data173,5839
    uint64_t id;175,5876
} bam1_t;177,5900
#define bam_is_rev(184,6083
#define bam_is_mrev(190,6325
#define bam_get_qname(196,6534
#define bam_get_cigar(206,6865
#define bam_get_seq(217,7316
#define bam_get_qual(223,7520
#define bam_get_aux(229,7772
#define bam_get_l_aux(235,8052
#define bam_seqi(242,8375
    #define bam_itr_destroy(295,10178
    #define bam_itr_queryi(296,10234
    #define bam_itr_querys(297,10316
    #define bam_itr_next(298,10394
    #define bam_index_load(301,10522
    #define sam_itr_destroy(308,10763
    #define sam_itr_next(311,10988
    #define sam_open(317,11146
    #define sam_close(318,11202
    typedef htsFile samFile;322,11315
    bam1_t *b;b374,13209
    int32_t qpos;375,13224
    int indel,376,13242
    int indel, level;376,13242
    uint32_t is_del:is_del377,13264
    uint32_t is_del:1, is_head:is_head377,13264
    uint32_t is_del:1, is_head:1, is_tail:is_tail377,13264
    uint32_t is_del:1, is_head:1, is_tail:1, is_refskip:is_refskip377,13264
    uint32_t is_del:1, is_head:1, is_tail:1, is_refskip:1, aux:aux377,13264
} bam_pileup1_t;378,13331
typedef int (*bam_plp_auto_f)bam_plp_auto_f380,13349
typedef struct __bam_plp_t *bam_plp_t;bam_plp_t383,13424
typedef struct __bam_mplp_t *bam_mplp_t;bam_mplp_t386,13485

htslib/synced_bcf_reader.h,2599
#define HTSLIB_SYNCED_BCF_READER_H53,2064
#define COLLAPSE_NONE 60,2228
#define COLLAPSE_SNPS 61,2310
#define COLLAPSE_INDELS 62,2395
#define COLLAPSE_ANY 63,2461
#define COLLAPSE_SOME 64,2557
#define COLLAPSE_BOTH 65,2625
typedef struct _bcf_sr_regions_t67,2681
    tbx_t *tbx;tbx70,2770
    hts_itr_t *itr;itr71,2813
    kstring_t line;72,2859
    htsFile *file;file73,2965
    char *fname;fname74,2984
    int is_bin;75,3001
    char **als;als76,3070
    kstring_t als_str;77,3169
    int nals,78,3224
    int nals, mals;78,3224
    int als_type;79,3309
    void (*missed_reg_handler)missed_reg_handler82,3465
    void *missed_reg_data;missed_reg_data83,3533
    struct _region_t *regs;regs86,3603
    void *seq_hash;seq_hash89,3703
    char **seq_names;seq_names90,3778
    int nseqs;91,3824
    int iseq;92,3901
    int start,93,3976
    int start, end;93,3976
    int prev_seq,94,4060
    int prev_seq, prev_start;94,4060
bcf_sr_regions_t;96,4092
    htsFile *file;file100,4128
    tbx_t *tbx_idx;tbx_idx101,4147
    hts_idx_t *bcf_idx;bcf_idx102,4167
    bcf_hdr_t *header;header103,4191
    hts_itr_t *itr;itr104,4214
    const char *fname;fname105,4234
    bcf1_t **buffer;buffer106,4257
    int nbuffer,107,4369
    int nbuffer, mbuffer;107,4369
    int nfilter_ids,108,4493
    int nfilter_ids, *filter_ids;filter_ids108,4493
    int *samples,samples109,4590
    int *samples, n_smpl;109,4590
bcf_sr_t;111,4686
    open_failed,115,4712
    open_failed, not_bgzf,115,4712
    open_failed, not_bgzf, idx_load_failed,115,4712
    open_failed, not_bgzf, idx_load_failed, file_type_error,115,4712
    open_failed, not_bgzf, idx_load_failed, file_type_error, api_usage_error,115,4712
    header_error116,4790
bcf_sr_error;118,4809
    int collapse;123,4881
    char *apply_filters;apply_filters124,4986
    int require_index;129,5363
    int max_unpack;130,5427
    int *has_line;has_line131,5548
    bcf_sr_error errnum;132,5694
    bcf_sr_t *readers;readers135,5742
    int nreaders;136,5765
    int streaming;137,5783
    int explicit_regs;138,5851
    char **samples;samples139,5956
    bcf_sr_regions_t *regions,regions140,5995
    bcf_sr_regions_t *regions, *targets;targets140,5995
    int targets_als;141,6091
    int targets_exclude;142,6178
    kstring_t tmps;143,6203
    int n_smpl;144,6223
bcf_srs_t;146,6241
#define bcf_sr_has_line(183,7165
#define bcf_sr_get_line(184,7224
#define bcf_sr_region_done(185,7331
#define bcf_sr_get_header(186,7440
#define bcf_sr_get_reader(187,7509

htslib/tbx.h,661
#define HTSLIB_TBX_H27,1226
#define TBX_MAX_SHIFT 31,1266
#define TBX_GENERIC 33,1292
#define TBX_SAM 34,1314
#define TBX_VCF 35,1336
#define TBX_UCSC 36,1358
    int32_t preset;39,1404
    int32_t sc,40,1424
    int32_t sc, bc,40,1424
    int32_t sc, bc, ec;40,1424
    int32_t meta_char,41,1483
    int32_t meta_char, line_skip;41,1483
} tbx_conf_t;42,1517
    tbx_conf_t conf;45,1549
    hts_idx_t *idx;idx46,1570
    void *dict;dict47,1590
} tbx_t;48,1606
    #define tbx_itr_destroy(56,1748
    #define tbx_itr_queryi(57,1804
    #define tbx_itr_querys(58,1911
    #define tbx_itr_next(59,2043
    #define tbx_bgzf_itr_next(60,2142

htslib/vcf.h,7325
#define HTSLIB_VCF_H33,1354
#define BCF_HL_FLT 46,1535
#define BCF_HL_INFO 47,1572
#define BCF_HL_FMT 48,1594
#define BCF_HL_CTG 49,1616
#define BCF_HL_STR 50,1638
#define BCF_HL_GEN 51,1702
#define BCF_HT_FLAG 53,1748
#define BCF_HT_INT 54,1785
#define BCF_HT_REAL 55,1807
#define BCF_HT_STR 56,1829
#define BCF_VL_FIXED 58,1852
#define BCF_VL_VAR 59,1894
#define BCF_VL_A 60,1917
#define BCF_VL_G 61,1940
#define BCF_VL_R 62,1963
#define BCF_DT_ID 76,2623
#define BCF_DT_CTG 77,2668
#define BCF_DT_SAMPLE 78,2694
    int type;82,2790
    char *key;key83,2838
    char *value;value84,2929
    int nkeys;85,3007
    char **keys,keys86,3066
    char **keys, **vals;vals86,3066
} bcf_hrec_t;87,3117
    uint32_t info[info90,3149
    bcf_hrec_t *hrec[hrec92,3326
    int id;93,3351
} bcf_idinfo_t;94,3363
    const char *key;key97,3397
    const bcf_idinfo_t *val;val98,3418
} bcf_idpair_t;99,3447
    int32_t n[n102,3481
    bcf_idpair_t *id[id103,3499
    void *dict[dict104,3524
    char **samples;samples105,3589
    bcf_hrec_t **hrec;hrec106,3609
    int nhrec,107,3632
    int nhrec, dirty;107,3632
    int ntransl,108,3654
    int ntransl, *transl[transl108,3654
    int nsamples_ori;109,3709
    uint8_t *keep_samples;keep_samples110,3770
    kstring_t mem;111,3797
} bcf_hdr_t;112,3816
#define BCF_BT_NULL 120,3914
#define BCF_BT_INT8 121,3940
#define BCF_BT_INT16 122,3966
#define BCF_BT_INT32 123,3992
#define BCF_BT_FLOAT 124,4018
#define BCF_BT_CHAR 125,4044
#define VCF_REF 127,4071
#define VCF_SNP 128,4091
#define VCF_MNP 129,4111
#define VCF_INDEL 130,4131
#define VCF_OTHER 131,4151
    int type,134,4189
    int type, n;134,4189
} variant_t;135,4282
    int id;138,4313
    int n,139,4422
    int n, size,139,4422
    int n, size, type;139,4422
    uint8_t *p;p140,4543
    uint32_t p_len;141,4614
    uint32_t p_off:p_off142,4634
    uint32_t p_off:31, p_free:p_free142,4634
} bcf_fmt_t;143,4667
    int key;146,4698
    int type,147,4805
    int type, len;147,4805
        int32_t i;149,4903
        float f;150,4939
    } v1;151,4973
    uint8_t *vptr;vptr152,5025
    uint32_t vptr_len;153,5140
    uint32_t vptr_off:vptr_off154,5250
            vptr_free:vptr_free155,5346
} bcf_info_t;157,5529
#define BCF1_DIRTY_ID 160,5545
#define BCF1_DIRTY_ALS 161,5570
#define BCF1_DIRTY_FLT 162,5595
#define BCF1_DIRTY_INF 163,5620
    int m_fmt,166,5663
    int m_fmt, m_info,166,5663
    int m_fmt, m_info, m_id,166,5663
    int m_fmt, m_info, m_id, m_als,166,5663
    int m_fmt, m_info, m_id, m_als, m_allele,166,5663
    int m_fmt, m_info, m_id, m_als, m_allele, m_flt;166,5663
    int n_flt;167,5767
    int *flt;flt168,5810
    char *id,id169,5859
    char *id, *als;als169,5859
    char **allele;allele170,5922
    bcf_info_t *info;info171,6028
    bcf_fmt_t *fmt;fmt172,6060
    variant_t *var;var173,6116
    int n_var,174,6201
    int n_var, var_type;174,6201
    int shared_dirty;175,6226
    int indiv_dirty;176,6302
} bcf_dec_t;177,6377
#define BCF_ERR_CTG_UNDEF 180,6392
#define BCF_ERR_TAG_UNDEF 181,6420
#define BCF_ERR_NCOLS 182,6448
    int32_t rid;196,7107
    int32_t pos;197,7134
    int32_t rlen;198,7159
    float qual;199,7194
    uint32_t n_info:n_info200,7220
    uint32_t n_info:16, n_allele:n_allele200,7220
    uint32_t n_fmt:n_fmt201,7257
    uint32_t n_fmt:8, n_sample:n_sample201,7257
    kstring_t shared,202,7292
    kstring_t shared, indiv;202,7292
    bcf_dec_t d;203,7321
    int max_unpack;204,7432
    int unpacked;205,7583
    int unpack_size[unpack_size206,7712
    int errcode;207,7793
} bcf1_t;208,7839
    #define bcf_init1(231,8610
    #define bcf_read1(232,8653
    #define vcf_read1(233,8708
    #define bcf_write1(234,8763
    #define vcf_write1(235,8819
    #define bcf_destroy1(236,8875
    #define vcf_parse1(237,8922
    #define bcf_clear1(238,8977
    #define vcf_format1(239,9022
    typedef htsFile vcfFile;274,10054
    #define bcf_open(275,10083
    #define vcf_open(276,10137
    #define bcf_close(277,10191
    #define vcf_close(278,10231
    #define BCF_UN_STR 335,12862
    #define BCF_UN_FLT 336,12917
    #define BCF_UN_INFO 337,12965
    #define BCF_UN_SHR 338,13011
    #define BCF_UN_FMT 339,13097
    #define BCF_UN_IND 340,13182
    #define BCF_UN_ALL 341,13262
    #define bcf_hdr_nsamples(435,17170
    #define bcf_update_info_int32(536,22274
    #define bcf_update_info_float(537,22393
    #define bcf_update_info_flag(538,22513
    #define bcf_update_info_string(539,22633
    #define bcf_update_format_int32(558,23803
    #define bcf_update_format_float(559,23924
    #define bcf_update_format_char(560,24046
    #define bcf_update_genotypes(561,24166
    #define bcf_gt_phased(568,24786
    #define bcf_gt_unphased(569,24837
    #define bcf_gt_missing 570,24886
    #define bcf_gt_is_missing(571,24925
    #define bcf_gt_is_phased(572,24980
    #define bcf_gt_allele(573,25026
    #define bcf_alleles2gt(576,25183
    static inline void bcf_gt2alleles(577,25265
    #define bcf_get_info_int32(625,27313
    #define bcf_get_info_float(626,27432
    #define bcf_get_info_string(627,27552
    #define bcf_get_info_flag(628,27671
    #define bcf_get_format_int32(652,28950
    #define bcf_get_format_float(653,29073
    #define bcf_get_format_char(654,29197
    #define bcf_get_genotypes(655,29320
    #define bcf_hdr_int2id(675,30314
    static inline int bcf_hdr_name2id(681,30556
    static inline const char *bcf_hdr_id2name(bcf_hdr_id2name682,30680
    static inline const char *bcf_seqname(bcf_seqname683,30798
    #define bcf_hdr_id2length(699,31618
    #define bcf_hdr_id2number(700,31722
    #define bcf_hdr_id2type(701,31821
    #define bcf_hdr_id2coltype(702,31925
    #define bcf_hdr_idinfo_exists(703,32026
    #define bcf_hdr_id2hrec(704,32143
    #define bcf_itr_destroy(722,33017
    #define bcf_itr_queryi(723,33073
    #define bcf_itr_querys(724,33175
    #define bcf_itr_next(725,33311
    #define bcf_index_load(726,33397
    #define bcf_index_seqnames(727,33458
#define bcf_int8_vector_end 752,34379
#define bcf_int16_vector_end 753,34421
#define bcf_int32_vector_end 754,34464
#define bcf_str_vector_end 755,34507
#define bcf_int8_missing 756,34538
#define bcf_int16_missing 757,34576
#define bcf_int32_missing 758,34615
#define bcf_str_missing 759,34654
static inline void bcf_float_set(762,34761
    union { uint32_t i;764,34824
    union { uint32_t i; float f;764,34824
#define bcf_float_set_vector_end(768,34897
#define bcf_float_set_missing(769,34974
static inline int bcf_float_is_missing(770,35048
    union { uint32_t i;772,35098
    union { uint32_t i; float f;772,35098
static inline int bcf_float_is_vector_end(776,35194
    union { uint32_t i;778,35247
    union { uint32_t i; float f;778,35247
static inline void bcf_format_gt(783,35347
    #define BRANCH(785,35427
    #undef BRANCH802,36239
static inline void bcf_enc_size(805,36260
static inline int bcf_enc_inttype(826,36848
static inline void bcf_enc_int1(833,37057
static inline int32_t bcf_dec_int1(855,37745
static inline int32_t bcf_dec_typed_int1(869,38091
static inline int32_t bcf_dec_size(874,38211

htslib/vcf_sweep.h,84
#define HTSLIB_VCF_SWEEP_H26,1192
typedef struct _bcf_sweep_t bcf_sweep_t;31,1255

htslib/vcfutils.h,319
#define HTSLIB_VCFUTILS_H26,1203
#define GT_HOM_RR 84,3243
#define GT_HOM_AA 85,3336
#define GT_HET_RA 86,3356
#define GT_HET_AA 87,3376
#define GT_HAPL_R 88,3396
#define GT_HAPL_A 89,3416
#define GT_UNKN 90,3436
static inline int bcf_acgt2int(93,3527
#define bcf_int2acgt(102,3727
#define bcf_ij2G(110,3937
